import asyncio
import aiomysql

async def check_table_structure():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...")
    
    try:
        connection = await aiomysql.connect(
            host='turntable.proxy.rlwy.net',
            port=11725,
            user='root',
            password='obyRyMEAMtDgJsSxGkontTXPZzwJdtFR',
            db='railway',
            charset='utf8mb4'
        )
        
        async with connection.cursor() as cursor:
            
            # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            tables = ['users', 'test_progress', 'test_results', 'goals']
            
            for table_name in tables:
                print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
                print("=" * 50)
                
                try:
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
                    await cursor.execute(f"DESCRIBE {table_name}")
                    columns = await cursor.fetchall()
                    
                    print("–ö–æ–ª–æ–Ω–∫–∏:")
                    for column in columns:
                        field, type_, null, key, default, extra = column
                        key_info = f" [{key}]" if key else ""
                        null_info = " (NULL)" if null == "YES" else " (NOT NULL)"
                        default_info = f" DEFAULT: {default}" if default else ""
                        extra_info = f" {extra}" if extra else ""
                        
                        print(f"  ‚Ä¢ {field}: {type_}{key_info}{null_info}{default_info}{extra_info}")
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                    await cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    count = await cursor.fetchone()
                    print(f"\nüìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count[0]}")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if count[0] > 0:
                        await cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                        rows = await cursor.fetchall()
                        print(f"\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ {len(rows)} –∑–∞–ø–∏—Å–∏):")
                        for i, row in enumerate(rows, 1):
                            print(f"  {i}. {row}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            print(f"\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...")
            await cursor.execute("""
                SELECT 
                    TABLE_NAME, 
                    COLUMN_NAME, 
                    REFERENCED_TABLE_NAME, 
                    REFERENCED_COLUMN_NAME
                FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
                WHERE TABLE_SCHEMA = 'railway' 
                AND REFERENCED_TABLE_NAME IS NOT NULL
            """)
            
            foreign_keys = await cursor.fetchall()
            if foreign_keys:
                for fk in foreign_keys:
                    print(f"  ‚Ä¢ {fk[0]}.{fk[1]} ‚Üí {fk[2]}.{fk[3]}")
            else:
                print("  –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        connection.close()
        
        print(f"\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–æ—Ç–æ–º")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def check_compatibility():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –Ω–∞—à–∏–º –∫–æ–¥–æ–º"""
    
    print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    expected_columns = {
        'users': [
            'id', 'telegram_id', 'fio', 'school', 'class_number', 
            'class_letter', 'gender', 'birth_year', 'city', 
            'language', 'artifacts', 'opened_profiles'
        ],
        'test_progress': [
            'id', 'telegram_id', 'current_scene', 'all_scenes',
            'profile_scores', 'profession_scores', 'lang', 'updated_at'
        ],
        'test_results': [
            'id', 'telegram_id', 'finished_at', 'profile', 'score', 'details'
        ]
    }
    
    try:
        connection = await aiomysql.connect(
            host='turntable.proxy.rlwy.net',
            port=11725,
            user='root',
            password='obyRyMEAMtDgJsSxGkontTXPZzwJdtFR',
            db='railway',
            charset='utf8mb4'
        )
        
        async with connection.cursor() as cursor:
            
            compatibility_issues = []
            
            for table_name, expected_cols in expected_columns.items():
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
                
                try:
                    await cursor.execute(f"DESCRIBE {table_name}")
                    columns = await cursor.fetchall()
                    actual_cols = [col[0] for col in columns]
                    
                    missing_cols = set(expected_cols) - set(actual_cols)
                    extra_cols = set(actual_cols) - set(expected_cols)
                    
                    if missing_cols:
                        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {list(missing_cols)}")
                        compatibility_issues.append(f"{table_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {list(missing_cols)}")
                    
                    if extra_cols:
                        print(f"  ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(extra_cols)}")
                    
                    if not missing_cols and not extra_cols:
                        print(f"  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
                    elif not missing_cols:
                        print(f"  ‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ (–µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏)")
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                    compatibility_issues.append(f"{table_name}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        connection.close()
        
        print(f"\n" + "=" * 60)
        if not compatibility_issues:
            print("‚úÖ –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–í–ú–ï–°–¢–ò–ú–ê!")
            print("üöÄ –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞!")
        else:
            print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò:")
            for issue in compatibility_issues:
                print(f"  ‚Ä¢ {issue}")
            print("\nüí° –ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ –∫–æ–¥")
        
        return len(compatibility_issues) == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

async def main():
    print("üóÑÔ∏è –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    await check_table_structure()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    compatible = await check_compatibility()
    
    if compatible:
        print(f"\nüéâ –ì–û–¢–û–í–û –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–û–¢–û–ú!")
        print(f"–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞")
    else:
        print(f"\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –°–¢–†–£–ö–¢–£–†–´")

if __name__ == "__main__":
    asyncio.run(main()) 