from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from utils.keyboards import (
    get_main_keyboard,
    get_goals_keyboard,
    get_progress_keyboard,
    get_materials_keyboard
)
from utils.messages import get_message, get_user_lang, format_test_stats
from utils.states import GoalStates, MaterialStates, NoteStates, ProfileStates, SettingsStates
from utils.error_handler import handle_errors
import aiohttp

router = Router()

@router.message(Command("start"))
@handle_errors
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    lang = await get_user_lang(message.from_user.id)
    welcome_texts = {
        'ru': (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SkillPath!</b>\n\n"
            "üß© <b>SkillPath</b> ‚Äî —ç—Ç–æ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö –±—É–¥—É—â–µ–≥–æ –∏ —Å–æ–±—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤!\n\n"
            "üîç –ü—Ä–æ–π–¥–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –ø—É—Ç—å —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ.\n"
            "üóùÔ∏è –û—Ç–∫—Ä—ã–≤–∞–π –ø–æ—Ä—Ç–∞–ª—ã, —Å–æ–±–∏—Ä–∞–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.\n"
            "üìä –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–µ—Å—Ç—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!\n\n"
            "<i>–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –≤—ã–±–æ—Ä ‚Äî —à–∞–≥ –∫ –º–µ—á—Ç–µ. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?</i>"
        ),
        'ky': (
            "<b>SkillPath'–∫–∞ –∫–æ—à –∫–µ–ª–∏“£–∏–∑!</b>\n\n"
            "üß© <b>SkillPath</b> ‚Äî –±—É–ª –∫–µ—Å–∏–ø—Ç–∏–∫ –±–∞–≥—ã—Ç –±–µ—Ä“Ø“Ø—á“Ø –∫–≤–µ—Å—Ç-–±–æ—Ç. –ê–ª —Å–∞–≥–∞ –∫“Ø—á—Ç“Ø“Ø –∂–∞–∫—Ç–∞—Ä—ã“£–¥—ã –∞—á—É—É–≥–∞, –∫–µ–ª–µ—á–µ–∫—Ç–µ–≥–∏ –∫–µ—Å–∏–ø—Ç–µ—Ä –º–µ–Ω–µ–Ω —Ç–∞–∞–Ω—ã—à—É—É–≥–∞ –∂–∞–Ω–∞ —É–Ω–∏–∫–∞–ª–¥—É—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä–¥—ã —á–æ–≥—É–ª—Ç—É—É–≥–∞ –∂–∞—Ä–¥–∞–º –±–µ—Ä–µ—Ç!\n\n"
            "üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–¥“Ø“Ø —Ç–µ—Å—Ç—Ç–µ–Ω ”©—Ç“Ø–ø, —Å–∞–≥–∞ —ã–ª–∞–π—ã–∫—Ç—É—É –∂–æ–ª–¥—É –±–∏–ª.\n"
            "üóùÔ∏è –ü–æ—Ä—Ç–∞–ª–¥–∞—Ä–¥—ã –∞—á, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä–¥—ã —Ç–æ–ø—Ç–æ –∂–∞–Ω–∞ –∫–µ—Å–∏–ø—Ç–µ—Ä –±–æ—é–Ω—á–∞ –∂–µ–∫–µ –∫–µ“£–µ—à—Ç–µ—Ä–¥–∏ –∞–ª.\n"
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å—Ç–∏ –∫”©–∑”©–º”©–ª–¥”©, —Ç–µ—Å—Ç–∫–µ –∫–∞–π—Ç—ã–ø, –∂–∞“£—ã –º“Ø–º–∫“Ø–Ω—á“Ø–ª“Ø–∫—Ç”©—Ä–¥“Ø –∞—á!\n\n"
            "<i>–ê—Ä –±–∏—Ä —Ç–∞–Ω–¥–æ–æ“£ ‚Äî –∫—ã—è–ª–≥–∞ –∫–∞—Ä–∞–π –∫–∞–¥–∞–º. –°–∞—è–∫–∞—Ç—ã“£–¥—ã –±–∞—à—Ç–æ–æ–≥–æ –¥–∞—è—Ä—Å—ã“£–±—ã?</i>"
        )
    }
    await message.answer(
        welcome_texts[lang],
        reply_markup=get_main_keyboard(lang),
        parse_mode="HTML"
    )

@router.message(F.text.in_(["üéØ –ú–æ–∏ —Ü–µ–ª–∏", "üéØ –ú–∞–∫—Å–∞—Ç—Ç–∞—Ä—ã–º"]))
@handle_errors
async def show_goals_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ü–µ–ª–µ–π."""
    lang = await get_user_lang(message.from_user.id)
    await message.answer(
        get_message("goals_menu", lang),
        reply_markup=get_goals_keyboard(lang),
        parse_mode="HTML"
    )

@router.message(F.text.in_(["üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å"]))
@handle_errors
async def show_progress_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    lang = await get_user_lang(message.from_user.id)
    await message.answer(
        get_message("progress_menu", lang),
        reply_markup=get_progress_keyboard(lang),
        parse_mode="HTML"
    )

@router.message(F.text.in_(["üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä"]))
@handle_errors
async def show_materials_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    lang = await get_user_lang(message.from_user.id)
    await message.answer(
        get_message("materials_menu", lang),
        reply_markup=get_materials_keyboard(lang),
        parse_mode="HTML"
    )

@router.message(F.text.in_(["‚ùì –ü–æ–º–æ—â—å", "‚ùì –ñ–∞—Ä–¥–∞–º"]))
@handle_errors
async def show_help(message: Message):
    lang = await get_user_lang(message.from_user.id)
    # –ù–æ–≤–æ–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
    help_texts = {
        'ru': (
            "<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n"
            "<i>SkillPath ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ –æ—Ç–∫—Ä—ã—Ç–∏–π!</i>\n\n"
            "<b>üß≠ –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–¥–µ—Å—å?</b>\n"
            "‚Ä¢ üß© <b>–¢–µ—Å—Ç</b> ‚Äî –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç –∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.\n"
            "‚Ä¢ üóùÔ∏è <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è</b> ‚Äî —Å–æ–±–∏—Ä–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø–æ—Ä—Ç–∞–ª—ã.\n"
            "‚Ä¢ üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
            "‚Ä¢ üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞—á–∏–≤–∫–∏.\n"
            "‚Ä¢ üåç <b>–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</b> ‚Äî –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è.\n\n"
            "<b>‚ú® –ù–µ –±–æ–π—Å—è –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã!</b>\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏ /start –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ!"
        ),
        'ky': (
            "<b>‚ùì –ñ–∞—Ä–¥–∞–º</b>\n\n"
            "<i>SkillPath ‚Äî –∫–µ—Å–∏–ø—Ç–µ—Ä –∂–∞–Ω–∞ –∞—á—ã–ª—ã—à—Ç–∞—Ä –¥“Ø–π–Ω”©—Å“Ø–Ω–¥”©–≥“Ø —Å–µ–Ω–∏–Ω –∂–æ–ª –∫”©—Ä—Å”©—Ç“Ø“Ø—á“Ø“£!</i>\n\n"
            "<b>üß≠ –ë—É–ª –∂–µ—Ä–¥–µ —ç–º–Ω–µ –∫—ã–ª–∞ –∞–ª–∞—Å—ã“£?</b>\n"
            "‚Ä¢ üß© <b>–¢–µ—Å—Ç</b> ‚Äî –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è–ª—ã–∫ –∫–≤–µ—Å—Ç—Ç–µ–Ω ”©—Ç“Ø–ø, –∫“Ø—á—Ç“Ø“Ø –∂–∞–∫—Ç–∞—Ä—ã“£–¥—ã –±–∏–ª.\n"
            "‚Ä¢ üóùÔ∏è <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è</b> ‚Äî —É–Ω–∏–∫–∞–ª–¥—É—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä–¥—ã —á–æ–≥—É–ª—Ç –∂–∞–Ω–∞ –ø–æ—Ä—Ç–∞–ª–¥–∞—Ä–¥—ã –∞—á.\n"
            "‚Ä¢ üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –∂–µ—Ç–∏—à–∫–µ–Ω–¥–∏–∫—Ç–µ—Ä–∏“£–¥–∏ –∫”©–∑”©–º”©–ª–¥”©.\n"
            "‚Ä¢ üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∂–∞–Ω–∞ –∞—á–∏–≤–∫–∞–ª–∞—Ä–¥—ã –∫”©—Ä.\n"
            "‚Ä¢ üåç <b>–¢–∏–ª–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø“Ø</b> ‚Äî —Ç–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞.\n\n"
            "<b>‚ú® –ñ–∞“£—ã –Ω–µ—Ä—Å–µ–ª–µ—Ä–¥–µ–Ω –∫–æ—Ä–∫–ø–æ ‚Äî –∞—Ä –±–∏—Ä –∫–∞–¥–∞–º –∂–∞“£—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç—Ç–æ—Ä–¥—É –∞—á–∞—Ç!</b>\n\n"
            "–°—É—Ä–æ–æ–ª–æ—Ä –±–æ–ª—Å–æ ‚Äî /start –¥–µ–ø –∂–∞–∑ –∂–µ —Ç”©–º”©–Ω–∫“Ø –±–∞—Å–∫—ã—á—Ç–∞—Ä–¥—ã –∫–æ–ª–¥–æ–Ω!"
        )
    }
    await message.answer(help_texts[lang], parse_mode="HTML")

@router.message(Command("profile"))
@handle_errors
async def cmd_profile(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è."""
    await state.set_state(ProfileStates.waiting_for_name)
    await message.answer("üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@router.message(Command("cancel"))
@handle_errors
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return

    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text.in_(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
@handle_errors
async def show_stats(message: Message):
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    API_URL = "http://localhost:8000/test_results/"
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}?telegram_id={user_id}") as resp:
            results = await resp.json()
    if not results:
        await message.answer(get_message("stats_none", lang))
        return
    text = format_test_stats(results, lang)
    await message.answer(text, parse_mode="HTML")

@router.message(F.text.in_(["üóùÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤", "üóùÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä –∫–æ–ª–ª–µ–∫—Ü–∏—è—Å—ã"]))
async def show_artifact_collection(message: Message):
    from handlers.test import show_artifact_collection
    await show_artifact_collection(message)

@router.message(F.text.in_(["üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåç –¢–∏–ª–¥–∏ ”©–∑–≥”©—Ä—Ç“Ø“Ø"]))
@handle_errors
async def change_language_menu(message: Message, state: FSMContext):
    LANG_INLINE_KB = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
             InlineKeyboardButton(text="–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π", callback_data="lang_ky")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ:", reply_markup=LANG_INLINE_KB)
    await state.set_state(SettingsStates.waiting_for_language)

@router.message(F.text.in_(["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "/profile"]))
@handle_errors
async def show_profile(message: Message):
    user_id = message.from_user.id
    lang = await get_user_lang(user_id)
    # --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API ---
    API_USER = "http://localhost:8000/users/"
    API_RESULTS = "http://localhost:8000/test_results/"
    user_api = {}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_USER}?telegram_id={user_id}") as resp:
                if resp.status == 200:
                    user_api = await resp.json()
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ API: {e}")
    # --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã ---
    # db_data = db._read_db()
    # user_local = db_data.get('users', {}).get(str(user_id), {})
    # --- –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî API ---
    def get_field(field, default="-"):
        return user_api.get(field) or default
    fio = get_field('fio')
    school = get_field('school')
    class_number = get_field('class_number')
    class_letter = get_field('class_letter')
    city = get_field('city')
    language = get_field('language', lang)
    gender = get_field('gender')
    birth_year = get_field('birth_year')
    # --- –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º ---
    portals_local = set(user_api.get('portals', []) or [])
    artifacts_api = set(user_api.get('artifacts', []) or [])
    portals = portals_local.union(artifacts_api)
    from handlers.test import ARTIFACTS_BY_PROFESSION
    total_artifacts = 60 if len(ARTIFACTS_BY_PROFESSION) < 60 else len(ARTIFACTS_BY_PROFESSION)
    collected = len(portals)
    # –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    bar_len = 20
    filled = int(bar_len * collected / total_artifacts)
    progress_bar = f"{'üü©'*filled}{'‚¨úÔ∏è'*(bar_len-filled)} {collected}/{total_artifacts}"
    # --- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —Ç–µ—Å—Ç—ã ---
    unique_professions = set()
    results = []
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_RESULTS}?telegram_id={user_id}") as resp:
                if resp.status == 200:
                    results = await resp.json()
    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏–∑ API: {e}")
    for r in results:
        prof = r.get('profile')
        if prof:
            unique_professions.add(prof)
    # –ê—á–∏–≤–∫–∞ –∑–∞ –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    all_collected = collected == total_artifacts
    achiev = "üèÜ" if all_collected else ""
    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —à–∞–ø–∫–∞
    profile_headers = {
        'ru': "<b>ü¶ä –¢–≤–æ–π –≥–µ—Ä–æ–π –≤ SkillPath</b>\n\n<code>‚ú® –ö–∞–∂–¥—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ‚Äî —Ç–≤–æ—è –ø–æ–±–µ–¥–∞! ‚ú®</code>",
        'ky': "<b>ü¶ä SkillPath—Ç–∞–≥—ã —Å–µ–Ω–∏–Ω –±–∞–∞—Ç—ã—Ä—ã”ä</b>\n\n<code>‚ú® –ê—Ä –±–∏—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ‚Äî —Å–µ–Ω–∏–Ω –∂–µ—Ç–∏—à–∫–µ–Ω–¥–∏–≥–∏”ä! ‚ú®</code>"
    }
    labels = {
        'ru': {
            'fio': 'üìú –ò–º—è', 'school': 'üè´ –®–∫–æ–ª–∞', 'class': 'üéí –ö–ª–∞—Å—Å', 'city': 'üåç –ì–æ—Ä–æ–¥', 'lang': 'üó£Ô∏è –Ø–∑—ã–∫',
            'gender': 'üßë‚Äçü§ù‚Äçüßë –ü–æ–ª', 'birth_year': 'üìÖ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è',
            'artifacts': 'üóùÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã', 'professions': 'üåà –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏', 'tests': 'üß© –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ',
            'progress': 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏', 'achiev': 'üèÖ –ê—á–∏–≤–∫–∏',
        },
        'ky': {
            'fio': 'üìú –ê—Ç—ã-–∂”©–Ω“Ø', 'school': 'üè´ –ú–µ–∫—Ç–µ–ø', 'class': 'üéí –ö–ª–∞—Å—Å', 'city': 'üåç –®–∞–∞—Ä', 'lang': 'üó£Ô∏è –¢–∏–ª',
            'gender': 'üßë‚Äçü§ù‚Äçüßë –ñ—ã–Ω—ã—Å—ã', 'birth_year': 'üìÖ –¢—É—É–ª–≥–∞–Ω –∂—ã–ª—ã',
            'artifacts': 'üóùÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä', 'professions': 'üåà –£–Ω–∏–∫–∞–ª–¥—É—É –ø—Ä–æ—Ñ–∏–ª–¥–µ—Ä', 'tests': 'üß© –¢–µ—Å—Ç—Ç–µ—Ä',
            'progress': 'üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è–Ω—ã–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∏', 'achiev': 'üèÖ –ê—á–∏–∏–≤–∫–∞–ª–∞—Ä',
        }
    }[lang]
    # –ß–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
    lang_map = {"ru": "–†—É—Å—Å–∫–∏–π", "ky": "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π", None: "–ù–µ –≤—ã–±—Ä–∞–Ω", "—Ä—É—Å—Å–∫–∏–π": "–†—É—Å—Å–∫–∏–π", "–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π": "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π"}
    language_human = lang_map.get(str(language).lower(), language or "-")
    gender_human = gender.capitalize() if gender else "-"
    # –ú–æ—Ç–∏–≤–∞—Ü–∏—è
    motivation = {
        'ru': "<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–æ–±–∏—Ä–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –æ—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ –ø–æ—Ä—Ç–∞–ª—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π—Å—è —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º! –¢—ã ‚Äî –≥–µ—Ä–æ–π —Å–≤–æ–µ–≥–æ –ø—É—Ç–∏! ü¶ä</i>",
        'ky': "<i>–ñ–∞“£—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä–¥—ã —á–æ–≥—É–ª—Ç, –ø–æ—Ä—Ç–∞–ª–¥–∞—Ä–¥—ã –∞—á –∂–∞–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏”ä –º–µ–Ω–µ–Ω —Å—ã–π–º—ã–∫—Ç–∞–Ω! –°–µ–Ω ‚Äî ”©–∑ –∂–æ–ª—É”ä–¥—É–Ω –±–∞–∞—Ç—ã—Ä—ã—Å—ã”ä! ü¶ä</i>"
    }[lang]
    # --- –ü–µ—Ä–µ–≤–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ ---
    from handlers.test import PROFILE_TRANSLATIONS
    unique_professions_display = [PROFILE_TRANSLATIONS[lang].get(p, p) for p in unique_professions]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    text_lines = [
        profile_headers[lang],
        "",
        f"{labels['fio']}: <b>{fio}</b>",
        f"{labels['school']}: <b>{school}</b>",
        f"{labels['class']}: <b>{class_number}{class_letter}</b>",
        f"{labels['city']}: <b>{city}</b>",
        f"{labels['lang']}: <b>{language_human}</b>",
        f"{labels['gender']}: <b>{gender_human}</b>",
        f"{labels['birth_year']}: <b>{birth_year}</b>",
        "",
        f"{labels['artifacts']}: <b>{collected}/{total_artifacts}</b>  {achiev}",
        f"{labels['progress']}: {progress_bar}",
        f"{labels['professions']}: <b>{len(unique_professions_display)}</b>"
    ]
    if lang == 'ky' and unique_professions_display:
        text_lines.append(f"<b>{', '.join(unique_professions_display)}</b>")
    text_lines.append(f"{labels['tests']}: <b>{len(results)}</b>")
    text_lines.append("")
    text_lines.append(motivation)
    text = "\n".join(text_lines)
    await message.answer(text, parse_mode="HTML")

def register_handlers(dispatcher):
    dispatcher.include_router(router)