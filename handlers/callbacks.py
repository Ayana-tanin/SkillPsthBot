from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import json
import aiohttp

from utils.error_handler import handle_errors
from utils.messages import get_message, normalize_lang, get_user_lang
from utils.keyboards import (
    get_main_keyboard,
    get_goals_keyboard,
    get_progress_keyboard,
    get_materials_keyboard,
    get_settings_keyboard
)
from utils.states import RegistrationStates
from utils.states import SettingsStates
from database import UserManager

router = Router()

LANG_INLINE_KB = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton(text="–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π", callback_data="lang_ky")]
    ]
)

@router.callback_query(F.data == "back_to_main")
@handle_errors
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.edit_text(
        get_message("welcome", lang)
    )
    await callback.message.answer(
        get_message("welcome", lang),
        reply_markup=get_main_keyboard(lang)
    )
    await callback.answer()

@router.callback_query(F.data == "goals_menu")
@handle_errors
async def show_goals_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ü–µ–ª–µ–π."""
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.edit_text(
        get_message("goals_menu", lang),
        reply_markup=get_goals_keyboard(lang)
    )
    await callback.answer()

@router.callback_query(F.data == "progress_menu")
@handle_errors
async def show_progress_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.edit_text(
        get_message("progress_menu", lang),
        reply_markup=get_progress_keyboard(lang)
    )
    await callback.answer()

@router.callback_query(F.data == "materials_menu")
@handle_errors
async def show_materials_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.edit_text(
        get_message("materials_menu", lang),
        reply_markup=get_materials_keyboard(lang)
    )
    await callback.answer()

@router.callback_query(F.data == "settings_menu")
@handle_errors
async def show_settings_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.edit_text(
        get_message("settings", lang),
        reply_markup=get_settings_keyboard(lang)
    )
    await callback.answer()

@router.callback_query(F.data == "change_language")
async def change_language_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ:",
        reply_markup=LANG_INLINE_KB
    )
    await state.set_state(SettingsStates.waiting_for_language)
    await callback.answer()

@router.callback_query(F.data.in_(["lang_ru", "lang_ky"]))
async def set_language_callback(callback: CallbackQuery, state: FSMContext):
    lang = "ru" if callback.data == "lang_ru" else "ky"
    user_id = callback.from_user.id
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    await UserManager.update_user(user_id, language=lang)
    await callback.message.edit_text(get_message("language_changed", lang, lang_name="–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π" if lang == "ky" else "–†—É—Å—Å–∫–∏–π"))
    await state.clear()
    await callback.message.answer(get_message("welcome", lang), reply_markup=get_main_keyboard(lang))
    await callback.answer()

@router.callback_query(F.data == "update_main_menu")
async def update_main_menu(callback: CallbackQuery):
    lang = await get_user_lang(callback.from_user.id)
    await callback.message.answer(get_message("welcome", lang), reply_markup=get_main_keyboard(lang))
    await callback.answer()

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = await get_user_lang(user_id)
    user = await UserManager.get_user(user_id)
    if not user or not user.get("telegram_id"):
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await callback.answer()
        return
    # –ß–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫
    lang_map = {"ru": "–†—É—Å—Å–∫–∏–π", "ky": "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π", None: "–ù–µ –≤—ã–±—Ä–∞–Ω", "—Ä—É—Å—Å–∫–∏–π": "–†—É—Å—Å–∫–∏–π", "–∫—ã—Ä–≥—ã–∑—Å–∫–∏–π": "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π"}
    user_lang = user.get('language')
    user_lang = lang_map.get(str(user_lang).lower(), user_lang or "-")
    # –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω
    if lang == "ky":
        text = (
            "üßô‚Äç‚ôÇÔ∏è <b>–°–µ–Ω–∏–Ω SkillPath –±–∞–∞—Ç—ã—Ä—ã“£</b>\n\n"
            f"üìú <b>–ê—Ç—ã-–∂”©–Ω“Ø:</b> {user.get('fio', '-') }\n"
            f"üè´ <b>–ú–µ–∫—Ç–µ–ø:</b> {user.get('school', '-') }\n"
            f"üéí <b>–ö–ª–∞—Å—Å:</b> {user.get('class_number', '-') }{user.get('class_letter', '')}\n"
            f"üßë‚Äçü§ù‚Äçüßë <b>–ñ—ã–Ω—ã—Å—ã:</b> {user.get('gender', '-') }\n"
            f"üìÖ <b>–¢—É—É–ª–≥–∞–Ω –∂—ã–ª—ã:</b> {user.get('birth_year', '-') }\n"
            f"üåç <b>–®–∞–∞—Ä/–∞–π—ã–ª:</b> {user.get('city', '-') }\n"
            f"üó£Ô∏è <b>–¢–∏–ª:</b> {user_lang}\n\n"
            "‚ú® <i>–ë—É–ª –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —Å–µ–Ω–∏–Ω –±–∏–ª–∏–º –∂–∞–Ω–∞ –∞—á—ã–ª—ã—à—Ç–∞—Ä –¥“Ø–π–Ω”©—Å“Ø–Ω”© –∂–æ–ª–¥–æ–º–æ“£. –ê—Ä –±–∏—Ä –∫–∞–¥–∞–º—ã“£ –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –±–æ–ª—Å—É–Ω!</i>"
        )
    else:
        text = (
            "üßô‚Äç‚ôÇÔ∏è <b>–¢–≤–æ–π –≥–µ—Ä–æ–π –≤ SkillPath</b>\n\n"
            f"üìú <b>–ò–º—è:</b> {user.get('fio', '-') }\n"
            f"üè´ <b>–®–∫–æ–ª–∞:</b> {user.get('school', '-') }\n"
            f"üéí <b>–ö–ª–∞—Å—Å:</b> {user.get('class_number', '-') }{user.get('class_letter', '')}\n"
            f"üßë‚Äçü§ù‚Äçüßë <b>–ü–æ–ª:</b> {user.get('gender', '-') }\n"
            f"üìÖ <b>–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user.get('birth_year', '-') }\n"
            f"üåç <b>–ì–æ—Ä–æ–¥:</b> {user.get('city', '-') }\n"
            f"üó£Ô∏è <b>–Ø–∑—ã–∫:</b> {user_lang}\n\n"
            "‚ú® <i>–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —Ç–≤–æ–π –ø—Ä–æ–ø—É—Å–∫ –≤ –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π, –∑–Ω–∞–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π. –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥ –±—É–¥–µ—Ç —è—Ä–∫–∏–º!</i>"
        )
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()

def register_handlers(dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    dispatcher.include_router(router)