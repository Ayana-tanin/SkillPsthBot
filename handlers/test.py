from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from utils.states import TestStates, RegistrationStates
from utils.scene_manager import scene_manager, SceneManager
from aiogram.filters import Command
import aiohttp
from utils.messages import get_message, normalize_lang, get_user_lang
from handlers.test_utils import start_test_flow
import json
from datetime import datetime
import random
from utils.database import db
from collections import defaultdict
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import re

router = Router()

PROFILE_DESCRIPTIONS = {
    '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å': '–¢–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤—Å—ë –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ, —Ç—ã –ª—é–±–∏—à—å –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è. –¢—ã –Ω–µ –±–æ–∏—à—å—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.',
    '–ê–Ω–∞–ª–∏—Ç–∏–∫': '–¢—ã –ª—é–±–∏—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏. –¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–µ–ª–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã.',
    '–¢–≤–æ—Ä–µ—Ü': '–£ —Ç–µ–±—è –±–æ–≥–∞—Ç–æ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ. –¢—ã —É–º–µ–µ—à—å –≤–∏–¥–µ—Ç—å –∫—Ä–∞—Å–æ—Ç—É –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ.',
    '–¢–µ—Ö–Ω–∞—Ä—å': '–¢—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –ª—é–±–∏—à—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏.',
    '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä': '–¢—ã –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—à—å –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–¥—å–º–∏, —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å –∏ –¥–æ–Ω–æ—Å–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏.',
    '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä': '–¢—ã —É–º–µ–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∫ —Ü–µ–ª–∏.',
    '–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫': '–¢—ã –≤–∏–¥–∏—à—å –º–∏—Ä —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ü–≤–µ—Ç–∞ –∏ —Ñ–æ—Ä–º—ã, —É–º–µ–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã.',
    '–¶–∏—Ñ—Ä–æ–≤–æ–π —Ö—É–¥–æ–∂–Ω–∏–∫': '–¢—ã —Ç–≤–æ—Ä–∏—à—å –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥–µ, —Å–æ–∑–¥–∞—ë—à—å –≥—Ä–∞—Ñ–∏–∫—É, –∞–Ω–∏–º–∞—Ü–∏—é –∏–ª–∏ –¥–∏–∑–∞–π–Ω.',
    '–ü–∏—Å–∞—Ç–µ–ª—å': '–¢—ã —É–º–µ–µ—à—å –≤—ã—Ä–∞–∂–∞—Ç—å –º—ã—Å–ª–∏ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏.',
    '–≠–∫–æ–ª–æ–≥': '–¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ –ø—Ä–∏—Ä–æ–¥–µ –∏ —Å—Ç—Ä–µ–º–∏—à—å—Å—è —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ –∏ –ª—É—á—à–µ.',
    '–£—á–µ–Ω—ã–π-–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫': '–¢—ã –ª—é–±–∏—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞–∫–æ–Ω—ã –ø—Ä–∏—Ä–æ–¥—ã –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã.',
    '–°–æ—Ü–∏–æ–ª–æ–≥': '–¢–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–æ –æ–±—â–µ—Å—Ç–≤–æ –∏ –∫–∞–∫ –ª—é–¥–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç.',
    '–ò—Å—Ç–æ—Ä–∏–∫': '–¢—ã –ª—é–±–∏—à—å –∏–∑—É—á–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏.',
    '–ü—Å–∏—Ö–æ–ª–æ–≥': '–¢—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ –ª—é–¥—è—Ö –∏ –∏—Ö –º–æ—Ç–∏–≤–∞—Ö, —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å.',
    '–ò–Ω–∂–µ–Ω–µ—Ä-—Å–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫': '–¢—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—à—å —Å–ª–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –¥–µ–ª–∞–µ—à—å –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏.',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': '–¢—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á.',
    '–ò–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö': '–¢—ã —É–º–µ–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä—ë–º–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –Ω–∏—Ö –ø–æ–ª—å–∑—É.',
    '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫': '–¢—ã —Å–æ–∑–¥–∞—ë—à—å —É–º–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å—ã.',
    '–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä': '–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –∏ —Å–æ–±–∏—Ä–∞–µ—à—å –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã.',
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω—â–∏–∫': '–¢—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ –∏ –ª—é–±–∏—à—å –ø–∞—è—Ç—å –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ö–µ–º—ã.',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤': '–¢—ã –¥–µ–ª–∞–µ—à—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É–¥–æ–±–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏.',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º': '–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∑–∞ –ª–æ–≥–∏–∫—É –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏.',
    '–°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä': '–¢—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—à—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤.',
    '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π': '–¢—ã —É–º–µ–µ—à—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ª—é–¥–µ–π.',
    '–§–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä': '–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∫–æ–º–∞–Ω–¥–µ —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π.',
    'PR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç': '–¢—ã —É–º–µ–µ—à—å –¥–æ–Ω–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.',
    '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥': '–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä—ã–Ω–æ–∫ –∏ –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.',
    '–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö': '–¢—ã –∏—â–µ—à—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä–æ–∏—à—å –ø—Ä–æ–≥–Ω–æ–∑—ã.',
    '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫': '–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.',
    '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫': '–¢—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ —É–º–µ–µ—à—å —Å—á–∏—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏.',
    '–õ–æ–≥–∏–∫': '–¢—ã –ª—é–±–∏—à—å —Ä–µ—à–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.',
    '–î–∏–∑–∞–π–Ω–µ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞': '–¢—ã —Å–æ–∑–¥–∞—ë—à—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.',
    '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫': '–¢—ã –≤—ã—Ä–∞–∂–∞–µ—à—å —Å–µ–±—è —á–µ—Ä–µ–∑ –º—É–∑—ã–∫—É, —Ç–µ–∞—Ç—Ä –∏–ª–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.'
}

PROFILE_EMOJIS = {
    '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å': 'üßë‚Äçüî¨',
    '–¢–µ—Ö–Ω–∏–∫': 'ü§ñ',
    '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π': 'üìö',
    '–¢–≤–æ—Ä–µ—Ü': 'üé®',
    '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π': 'üíº',
    '–ü—Ä–∏–∫–ª–∞–¥–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'üîß',
}

PROFILE_JOBS = {
    '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å': ['–ù–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–õ–∞–±–æ—Ä–∞–Ω—Ç', 'Data Scientist'],
    '–ê–Ω–∞–ª–∏—Ç–∏–∫': ['–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', 'Data Analyst'],
    '–¢–≤–æ—Ä–µ—Ü': ['–î–∏–∑–∞–π–Ω–µ—Ä', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'],
    '–¢–µ—Ö–Ω–∞—Ä—å': ['–ò–Ω–∂–µ–Ω–µ—Ä', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–¢–µ—Ö–Ω–∏–∫'],
    '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä': ['PR-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–£—á–∏—Ç–µ–ª—å'],
    '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä': ['–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'Event-–º–µ–Ω–µ–¥–∂–µ—Ä'],
    '–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫': ['–•—É–¥–æ–∂–Ω–∏–∫', '–ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä', '–î–µ–∫–æ—Ä–∞—Ç–æ—Ä'],
    '–¶–∏—Ñ—Ä–æ–≤–æ–π —Ö—É–¥–æ–∂–Ω–∏–∫': ['–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä', '3D-–∞–Ω–∏–º–∞—Ç–æ—Ä', 'UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä'],
    '–ü–∏—Å–∞—Ç–µ–ª—å': ['–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä', '–†–µ–¥–∞–∫—Ç–æ—Ä', '–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç'],
    '–≠–∫–æ–ª–æ–≥': ['–≠–∫–æ–ª–æ–≥', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é'],
    '–£—á–µ–Ω—ã–π-–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫': ['–ë–∏–æ–ª–æ–≥', '–§–∏–∑–∏–∫', '–•–∏–º–∏–∫'],
    '–°–æ—Ü–∏–æ–ª–æ–≥': ['–°–æ—Ü–∏–æ–ª–æ–≥', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è'],
    '–ò—Å—Ç–æ—Ä–∏–∫': ['–ò—Å—Ç–æ—Ä–∏–∫', '–ê—Ä—Ö–∏–≤–∏—Å—Ç'],
    '–ü—Å–∏—Ö–æ–ª–æ–≥': ['–ü—Å–∏—Ö–æ–ª–æ–≥', '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'],
    '–ò–Ω–∂–µ–Ω–µ—Ä-—Å–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫': ['–°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å–∏—Å—Ç–µ–º'],
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': ['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û', 'Web-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'],
    '–ò–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö': ['Data Engineer', '–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö'],
    '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫': ['–ò–Ω–∂–µ–Ω–µ—Ä-—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫', '–ú–µ—Ö–∞—Ç—Ä–æ–Ω–∏–∫'],
    '–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä': ['–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫'],
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω—â–∏–∫': ['–ò–Ω–∂–µ–Ω–µ—Ä-—ç–ª–µ–∫—Ç—Ä–æ–Ω—â–∏–∫', '–°—Ö–µ–º–æ—Ç–µ—Ö–Ω–∏–∫'],
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤': ['Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'UI-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'],
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Å–∏—Å—Ç–µ–º': ['Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'DevOps-–∏–Ω–∂–µ–Ω–µ—Ä'],
    '–°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä': ['–°–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', 'DevOps-–∏–Ω–∂–µ–Ω–µ—Ä'],
    '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π': ['Event-–º–µ–Ω–µ–¥–∂–µ—Ä', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤'],
    '–§–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä': ['–§–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'],
    'PR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç': ['PR-–º–µ–Ω–µ–¥–∂–µ—Ä', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º'],
    '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥': ['–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–ë—Ä–µ–Ω–¥-–º–µ–Ω–µ–¥–∂–µ—Ä'],
    '–ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö': ['Data Analyst', 'BI-–∞–Ω–∞–ª–∏—Ç–∏–∫'],
    '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫': ['–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫'],
    '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫': ['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫', '–≠–∫–æ–Ω–æ–º–∏—Å—Ç'],
    '–õ–æ–≥–∏–∫': ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤'],
    '–î–∏–∑–∞–π–Ω–µ—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞': ['–î–∏–∑–∞–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä'],
    '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å—Å–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫': ['–ê–∫—Ç—ë—Ä', '–ú—É–∑—ã–∫–∞–Ω—Ç', '–í–µ–¥—É—â–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π']
}

RECOMMENDATION = (
    '‚ú® SkillPath —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: –†–∞–∑–≤–∏–≤–∞–π —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø—Ä–æ–±—É–π —Å–µ–±—è –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö. '
    '–ú–∏—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è, –∏ —Ç–≤–æ–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä–∞—Ö!'
)

API_URL = "http://localhost:8000/users/"

# === –î–û–ë–ê–í–õ–Ø–Æ –°–õ–û–í–ê–†–¨ –ê–†–¢–ï–§–ê–ö–¢–û–í –ü–û –ü–†–û–§–ï–°–°–ò–Ø–ú ===
ARTIFACTS_BY_PROFESSION = {
    # –ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –≤–µ—Ç–∫–∞
    '–§–∏–ª–æ–ª–æ–≥–∏—è (—è–∑—ã–∫–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞)': {
        'ru': {'name': '–ü–µ—Ä–≤–æ—Ä–µ—á—å ‚Äî –ü–µ—Ä–æ –í–µ–∫–∞', 'desc': '–ü–µ—Ä–æ, –≤–ø–∏—Ç–∞–≤—à–µ–µ –∫—Ä–æ–≤—å —Å–ª–æ–≤ –∏ –¥—ã—Ö–∞–Ω–∏–µ –ø–æ—ç–∑–∏–∏.', 'emoji': '‚ú®'},
        'ky': {'name': '–ê–ª–≥–∞—á–∫—ã —Å”©–∑ ‚Äî –ö—ã–ª—ã–º –∫–∞–ª–µ–º–∏', 'desc': '–°”©–∑–¥“Ø–Ω –∫–∞–Ω—ã –º–µ–Ω–µ–Ω –ø–æ—ç–∑–∏—è–Ω—ã–Ω –¥–µ–º–∏–Ω —Å–∏“£–∏—Ä–≥–µ–Ω –∫–∞–ª–µ–º.', 'emoji': '‚ú®'},
        'branch': 'humanitarian'
    },
    '–ò—Å—Ç–æ—Ä–∏—è': {
        'ru': {'name': '–•—Ä–æ–Ω–æ—Å—Ñ–µ—Ä–∞ ‚Äî –ß–∞—Å—ã –†–∞–∑–ª–æ–º–∞', 'desc': '–ß–∞—Å—ã, —Ö—Ä–∞–Ω—è—â–∏–µ –ø—ã–ª—å –∏–º–ø–µ—Ä–∏–π –∏ —Ç—Ä–µ—Å–∫ –ø–∞–¥–µ–Ω–∏–π.', 'emoji': '‚è≥'},
        'ky': {'name': '–•—Ä–æ–Ω–æ—Å—Ñ–µ—Ä–∞ ‚Äî –ñ–∞—Ä—ã–ª—É—É —Å–∞–∞—Ç—ã', 'desc': '–ò–º–ø–µ—Ä–∏—è–ª–∞—Ä–¥—ã–Ω —á–∞“£—ã–Ω –∂–∞–Ω–∞ –∫—É–ª–∞–≥–∞–Ω “Ø–Ω–¥“Ø —Å–∞–∫—Ç–∞–≥–∞–Ω —Å–∞–∞—Ç.', 'emoji': '‚è≥'},
        'branch': 'humanitarian'
    },
    '–ü—Ä–∞–≤–æ–≤–µ–¥–µ–Ω–∏–µ': {
        'ru': {'name': '–ö–ª–∏–Ω–æ–∫ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ ‚Äî –í–µ—Å—ã –°–ª–µ–ø–æ–π –ò—Å—Ç–∏–Ω—ã', 'desc': '–í–µ—Å—ã, –æ—Ç—Å–µ–∫–∞—é—â–∏–µ –ª–æ–∂—å –æ—Ç –∑–∞–∫–æ–Ω–∞.', 'emoji': '‚öñÔ∏è'},
        'ky': {'name': '–ê–¥–∏–ª–µ—Ç—Ç–∏–∫ –∫—ã–ª—ã—á—ã ‚Äî –°–æ–∫—É—Ä –∞–∫—ã–π–∫–∞—Ç—Ç—ã–Ω —Ç–∞—Ä–∞–∑–∞—Å—ã', 'desc': '–ñ–∞–ª–≥–∞–Ω–¥—ã –º—ã–π–∑–∞–º–¥–∞–Ω –±”©–ª“Ø–ø —Ç—É—Ä–≥–∞–Ω —Ç–∞—Ä–∞–∑–∞.', 'emoji': '‚öñÔ∏è'},
        'branch': 'humanitarian'
    },
    '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞': {
        'ru': {'name': '–û–∫–æ –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤ ‚Äî –ü–µ—Ä–æ-–ú–∏–∫—Ä–æ—Ñ–æ–Ω', 'desc': '–ü–µ—Ä–æ-–º–∏–∫—Ä–æ—Ñ–æ–Ω, —Å–ª—ã—à–∞—â–µ–µ —à—É–º —Ç–æ–ª–ø—ã –∏ —à—ë–ø–æ—Ç –∏—Å—Ç–∏–Ω—ã.', 'emoji': 'üì¢'},
        'ky': {'name': '–ö–µ—Å–∏–ª–∏—à—Ç–µ—Ä –∫”©–∑“Ø ‚Äî –ú–∏–∫—Ä–æ—Ñ–æ–Ω-–∫–∞–ª–µ–º', 'desc': '–ö–∞–ª–∫—Ç—ã–Ω —ã–∑—ã-—á—É—É–Ω—É –∂–∞–Ω–∞ –∞–∫—ã–π–∫–∞—Ç—Ç—ã–Ω —à—ã–±—ã—à—ã–Ω —É–∫–∫–∞–Ω –∫–∞–ª–µ–º.', 'emoji': 'üì¢'},
        'branch': 'humanitarian'
    },
    '–§–∏–ª–æ—Å–æ—Ñ–∏—è': {
        'ru': {'name': '–õ–æ–≥–æ—Å-–°—Ñ–µ—Ä–∞ ‚Äî –ö—É–± –ü–∞—Ä–∞–¥–æ–∫—Å–æ–≤', 'desc': '–ö—É–±, –≤—Ä–∞—â–∞—é—â–∏–π—Å—è –≤ –±–µ–∑–¥–Ω–µ –º—ã—à–ª–µ–Ω–∏—è.', 'emoji': 'üåÄ'},
        'ky': {'name': '–õ–æ–≥–æ—Å-—Å—Ñ–µ—Ä–∞ ‚Äî –ü–∞—Ä–∞–¥–æ–∫—Å—Ç–∞—Ä –∫—É–±—É', 'desc': '–û–π–ª–æ–Ω—É—É —Ç–µ—Ä–µ“£–¥–∏–≥–∏–Ω–¥–µ –∞–π–ª–∞–Ω–≥–∞–Ω –∫—É–±.', 'emoji': 'üåÄ'},
        'branch': 'humanitarian'
    },
    '–ö—É–ª—å—Ç—É—Ä–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–õ–∏–∫ –ú–∏—Ä–∞ ‚Äî –ú–∞—Å–∫–∞ –¢—ã—Å—è—á–∏ –õ–∏–∫–æ–≤', 'desc': '–ú–∞—Å–∫–∞, –æ—Ç—Ä–∞–∂–∞—é—â–∞—è —Ö–∞–æ—Å —Å–º—ã—Å–ª–æ–≤.', 'emoji': 'üé≠'},
        'ky': {'name': '–î“Ø–π–Ω”© –∂“Ø–∑“Ø ‚Äî –ú–∏“£ –∂“Ø–∑–¥“Ø“Ø –º–∞—Å–∫–∞', 'desc': '–ú–∞–∞–Ω–∏–ª–µ—Ä–¥–∏–Ω —Ö–∞–æ—Å—É–Ω —á–∞–≥—ã–ª–¥—ã—Ä–≥–∞–Ω –º–∞—Å–∫–∞.', 'emoji': 'üé≠'},
        'branch': 'humanitarian'
    },
    '–ü–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤–µ–¥–µ–Ω–∏–µ': {
        'ru': {'name': '–ó–µ—Ä–∫–∞–ª–æ –≠—Ö–∞ ‚Äî –ö–∞–º–µ–Ω—å –ú–Ω–æ–≥–æ–≥–æ–ª–æ—Å–∏—è', 'desc': '–ö–∞–º–µ–Ω—å, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π –æ–¥–Ω–æ –≤ —Ç—ã—Å—è—á–µ —è–∑—ã–∫–æ–≤.', 'emoji': 'üó£Ô∏è'},
        'ky': {'name': '–ñ–∞“£—ã—Ä—ã–∫ –∫“Ø–∑–≥“Ø—Å“Ø ‚Äî –ö”©–ø “Ø–Ω–¥“Ø“Ø —Ç–∞—à', 'desc': '–ë–∏—Ä–¥–∏ –º–∏“£ —Ç–∏–ª–¥–µ –∫–∞–π—Ç–∞–ª–∞–≥–∞–Ω —Ç–∞—à.', 'emoji': 'üó£Ô∏è'},
        'branch': 'humanitarian'
    },
    '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞': {
        'ru': {'name': '–ö–æ—Ä–µ–Ω—å –ì–ª–∞–≥–æ–ª–∞ ‚Äî –î—Ä–µ–≤–æ –Ø–∑—ã–∫–æ–≤', 'desc': '–î—Ä–µ–≤–æ, —á—å–∏ –≤–µ—Ç–≤–∏ —à–µ–ø—á—É—Ç –Ω–∞ –≤—Å–µ—Ö –Ω–∞—Ä–µ—á–∏—è—Ö –ó–µ–º–ª–∏.', 'emoji': 'üî§'},
        'ky': {'name': '–≠—Ç–∏—à—Ç–∏–Ω —Ç–∞–º—ã—Ä—ã ‚Äî –¢–∏–ª–¥–µ—Ä –¥–∞—Ä–∞–≥—ã', 'desc': '–ë—É—Ç–∞–∫—Ç–∞—Ä—ã –∂–µ—Ä–¥–µ–≥–∏ –±–∞—Ä–¥—ã–∫ —Ç–∏–ª–¥–µ—Ä–¥–µ —à—ã–±—ã—Ä–∞–≥–∞–Ω –¥–∞—Ä–∞–∫.', 'emoji': 'üî§'},
        'branch': 'humanitarian'
    },
    '–¢–µ–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–ò—Å–∫—Ä–∞ –ó–∞–≤–µ—Ç–∞ ‚Äî –ü–µ—Ä–æ –û–≥–Ω—è', 'desc': '–ü–µ—Ä–æ, –Ω–µ—Å—É—â–µ–µ —Å–≤–µ—Ç –Ω–µ–º–µ—Ä–∫–Ω—É—â–µ–π –≤–µ—Ä—ã.', 'emoji': 'üïØÔ∏è'},
        'ky': {'name': '–ê–Ω—Ç—ã–Ω—ã–Ω —É—á–∫—É–Ω—É ‚Äî –û—Ç –∫–∞–ª–µ–º–∏', 'desc': '”®—á–ø”©—Å –∏—à–µ–Ω–∏–º–¥–∏–Ω –∂–∞—Ä—ã–≥—ã–Ω –∞–ª–∞ –∂“Ø—Ä–≥”©–Ω –∫–∞–ª–µ–º.', 'emoji': 'üïØÔ∏è'},
        'branch': 'humanitarian'
    },
    '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞': {
        'ru': {'name': '–°–µ—Ä–¥—Ü–µ –ü—É—Ç–µ–≤–æ–¥–Ω–æ–µ ‚Äî –ö–æ–º–ø–∞—Å –ú–∏–ª–æ—Å–µ—Ä–¥–∏—è', 'desc': '–ö–æ–º–ø–∞—Å, –Ω–µ –≤–µ–¥–∞—é—â–∏–π –Ω–∏ —Å–µ–≤–µ—Ä–∞, –Ω–∏ –≥—Ä–∞–Ω–∏—Ü.', 'emoji': 'üíù'},
        'ky': {'name': '–ñ–æ–ª –±–∞—à—á—ã –∂“Ø—Ä”©–∫ ‚Äî –ë–æ–æ—Ä—É–∫–µ—Ä–¥–∏–∫ –∫–æ–º–ø–∞—Å—ã', 'desc': '–¢“Ø–Ω–¥“Ø–∫—Ç“Ø –¥–∞, —á–µ–∫ –∞—Ä–∞–ª–∞—Ä–¥—ã –¥–∞ –±–∏–ª–±–µ–≥–µ–Ω –∫–æ–º–ø–∞—Å.', 'emoji': 'üíù'},
        'branch': 'humanitarian'
    },
    # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–∞—è –≤–µ—Ç–∫–∞
    '–ë–∏–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–ö–æ—Å—Ç—è–Ω–æ–π –≥–µ—Ä–±–∞—Ä–∏–π', 'desc': '–ò–∑–æ–≥–Ω—É—Ç–∞—è –∫–æ—Ä–æ–±–∫–∞ –∏–∑ —Å–ª–æ–Ω–æ–≤–æ–π –∫–æ—Å—Ç–∏ –º—É—Ç–∞–Ω—Ç–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π ‚Äî –∑–∞—Å—É—à–µ–Ω–Ω—ã–µ, –Ω–æ –∂–∏–≤—ã–µ –æ–±—Ä–∞–∑—Ü—ã —Ñ–ª–æ—Ä—ã –ó–æ–Ω—ã.', 'emoji': 'ü¶¥'},
        'ky': {'name': '–°”©”©–∫ –≥–µ—Ä–±–∞—Ä–∏–π–∏', 'desc': '–ú—É—Ç–∞–ª–∞–Ω–≥–∞–Ω –ø–∏–ª–¥–∏–Ω —Å”©”©–≥“Ø–Ω”©–Ω –∂–∞—Å–∞–ª–≥–∞–Ω –∏–π–∏–ª–≥–µ–Ω –∫—É—Ç—É—á–∞, –∏—á–∏–Ω–¥–µ –ó–æ–Ω–∞–Ω—ã–Ω —Ñ–ª–æ—Ä–∞—Å—ã–Ω—ã–Ω –∫—É—Ä–≥–∞—Ç—ã–ª–≥–∞–Ω, –±–∏—Ä–æ–∫ —Ç–∏—Ä“Ø“Ø “Ø–ª–≥“Ø–ª”©—Ä“Ø –±–∞—Ä.', 'emoji': 'ü¶¥'},
        'branch': 'natural_science'
    },
    '–•–∏–º–∏—è': {
        'ru': {'name': '–ê—É—Ä–æ—Ö–∏–º', 'desc': '–§–ª—è–∂–∫–∞ –∏–∑ –æ–±–ª—É—á—ë–Ω–Ω–æ–≥–æ —Å—Ç–µ–∫–ª–∞, –≤–µ—á–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≥–æ–ª—É–±—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º.', 'emoji': 'üß™'},
        'ky': {'name': '–ê—É—Ä–æ—Ö–∏–º', 'desc': '–ù—É—Ä–¥–∞–Ω–≥–∞–Ω –∞–π–Ω–µ–∫—Ç–µ–Ω –∂–∞—Å–∞–ª–≥–∞–Ω —Ñ–ª—è–∂–∫–∞, –∫”©–∫ —Ç“Ø—Å—Ç“Ø“Ø —ç—Ä–∏—Ç–º–µ –º–µ–Ω–µ–Ω –¥–∞–π—ã–º–∞ —Ç–æ–ª—Ç—É—Ä—É–ª–≥–∞–Ω.', 'emoji': 'üß™'},
        'branch': 'natural_science'
    },
    '–§–∏–∑–∏–∫–∞': {
        'ru': {'name': '–†–µ–∑–æ–Ω–∞—Ç–æ—Ä –ì—Ä–æ–º–∞', 'desc': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –∫–∞—Ç—É—à–∫–∞ —Å –¥—Ä–µ–≤–Ω–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏, –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞ –∫–æ—Ä–ø—É—Å–µ.', 'emoji': '‚ö°'},
        'ky': {'name': '–î“Ø“£–≥“Ø—Ä”©”© —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—É', 'desc': '–ö–æ—Ä–ø—É—Å—É–Ω–¥–∞ –±–∞–π—ã—Ä–∫—ã —Ñ–æ—Ä–º—É–ª–∞–ª–∞—Ä –æ—é–ø –∂–∞–∑—ã–ª–≥–∞–Ω –ø–æ—Ä—Ç–∞—Ç–∏–≤–¥“Ø“Ø –∫–∞—Ç—É—à–∫–∞.', 'emoji': '‚ö°'},
        'branch': 'natural_science'
    },
    '–≠–∫–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–ö–æ—Ä–µ–Ω—å –ü–æ—Å–ª–µ–¥–Ω–µ–≥–æ –õ–µ—Å–∞', 'desc': '–£–∑–ª–æ–≤–∞—Ç–∞—è –¥—Ä–µ–≤–µ—Å–Ω–∞—è —Å–ø–∏—Ä–∞–ª—å, –ø—Ä–æ—Ä–æ—Å—à–∞—è —á–µ—Ä–µ–∑ —Å—Ç–∞–ª—å.', 'emoji': 'üå±'},
        'ky': {'name': '–ê–∫—ã—Ä–∫—ã —Ç–æ–∫–æ–π–¥—É–Ω —Ç–∞–º—ã—Ä—ã', 'desc': '–ë–æ–ª–æ—Ç—Ç—É–Ω –∏—á–∏–Ω–µ–Ω —á—ã–∫–∫–∞–Ω —Ç“Ø–π“Ø–Ω–¥“Ø“Ø –∂—ã–≥–∞—á —Å–ø–∏—Ä–∞–ª–∏.', 'emoji': 'üå±'},
        'branch': 'natural_science'
    },
    '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': {
        'ru': {'name': '–ö–∞—Ä—Ç–∞ –ñ–∏–≤–æ–π –ó–µ–º–ª–∏', 'desc': '–ö–æ–∂–∞ —Ç–∏—Ç–∞–Ω–∞, –≤—ã—Ç—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –º–µ–Ω—è—é—â–∏–º–∏—Å—è –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –Ω–æ–≤—ã–º –∞–Ω–æ–º–∞–ª–∏—è–º.', 'emoji': 'üó∫Ô∏è'},
        'ky': {'name': '–¢–∏—Ä“Ø“Ø –ñ–µ—Ä–¥–∏–Ω –∫–∞—Ä—Ç–∞—Å—ã', 'desc': '–ñ–∞“£—ã –∞–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä–≥–∞ –∂–∞–∫—ã–Ω–¥–∞–≥–∞–Ω–¥–∞ ”©–∑–≥”©—Ä“Ø–ª“Ø“Ø—á“Ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–ª–∞—Ä –±–∞—Ä —Ç–∏—Ç–∞–Ω–¥—ã–Ω —Ç–µ—Ä–∏—Å–∏.', 'emoji': 'üó∫Ô∏è'},
        'branch': 'natural_science'
    },
    '–ì–µ–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–û—Å–∫–æ–ª–æ–∫ –°–µ—Ä–¥—Ü–∞ –ü–ª–∏—Ç—ã', 'desc': '–ö–∞–º–µ–Ω—å, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –Ω–∞ –≥–ª—É–±–∏–Ω–µ 12 –∫–º, –∫–æ—Ç–æ—Ä—ã–π –ø—É–ª—å—Å–∏—Ä—É–µ—Ç.', 'emoji': 'ü™®'},
        'ky': {'name': '–ü–ª–∏—Ç–∞–Ω—ã–Ω –ñ“Ø—Ä”©–≥“Ø–Ω“Ø–Ω —Å—ã–Ω—ã–≥—ã', 'desc': '12 –∫–º —Ç–µ—Ä–µ“£–¥–∏–∫—Ç–µ —Ç–∞–±—ã–ª–≥–∞–Ω, —Å–æ–≥—É–ø —Ç—É—Ä–≥–∞–Ω —Ç–∞—à.', 'emoji': 'ü™®'},
        'branch': 'natural_science'
    },
    '–§–∞—Ä–º–∞—Ü–∏—è': {
        'ru': {'name': '–ê–º–ø—É–ª–∞ –ö–æ–≤—á–µ–≥–∞', 'desc': '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—ã–≤–æ—Ä–æ—Ç–∫–∞ –¥–æ-–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–Ω–æ–π —ç–ø–æ—Ö–∏.', 'emoji': 'üíâ'},
        'ky': {'name': '–ö–æ–≤—á–µ–≥ –∞–º–ø—É–ª–∞—Å—ã', 'desc': '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞–≥–∞ —á–µ–π–∏–Ω–∫–∏ –∞–∫—ã—Ä–∫—ã —Å—ã–≤–æ—Ä–æ—Ç–∫–∞.', 'emoji': 'üíâ'},
        'branch': 'natural_science'
    },
    '–ú–µ–¥–∏—Ü–∏–Ω–∞': {
        'ru': {'name': '–®–ø—Ä–∏—Ü –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è', 'desc': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –∏–∑ —Ç–∏—Ç–∞–Ω–æ–≤–æ–≥–æ —Ä–µ–±—Ä–∞ –ø–∞–≤—à–µ–≥–æ –≥–∏–≥–∞–Ω—Ç–∞.', 'emoji': 'ü©∫'},
        'ky': {'name': '–ñ–∞“£—ã—Ä—É—É —à–ø—Ä–∏—Ü–∏', 'desc': '–¢“Ø—à–∫”©–Ω –∞–ª–ø—Ç—ã–Ω —Ç–∏—Ç–∞–Ω –∫–∞–±—ã—Ä–≥–∞—Å—ã–Ω–∞–Ω –∂–∞—Å–∞–ª–≥–∞–Ω –∞—Å–ø–∞–ø.', 'emoji': 'ü©∫'},
        'branch': 'natural_science'
    },
    '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è': {
        'ru': {'name': '–ó—É–± –î—Ä–µ–≤–Ω–µ–≥–æ', 'desc': '–ö–ª—ã–∫ —Ö–∏—â–Ω–∏–∫–∞ –¥–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π —ç–ø–æ—Ö–∏.', 'emoji': 'ü¶∑'},
        'ky': {'name': '–ë–∞–π—ã—Ä–∫—ã–Ω—ã–Ω —Ç–∏—à–∏', 'desc': '–ê–¥–∞–º–≥–∞ —á–µ–π–∏–Ω–∫–∏ –¥–æ–æ—Ä–¥—É–Ω –∂—ã—Ä—Ç–∫—ã—á—ã–Ω—ã–Ω –∞–∑—É—É—Å—É.', 'emoji': 'ü¶∑'},
        'branch': 'natural_science'
    },
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': {
        'ru': {'name': '–ö—É–± –ù–µ—Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏', 'desc': '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É.', 'emoji': 'üî≤'},
        'ky': {'name': '–¢—É—É—Ä–∞ –∫–µ–ª–±”©”© –∫—É–±—É', 'desc': '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞–Ω—ã –±—É–∑–≥–∞–Ω –≥–µ–æ–º–µ—Ç—Ä–∏—è–ª—ã–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.', 'emoji': 'üî≤'},
        'branch': 'natural_science'
    },
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–µ—Ç–∫–∞
    '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è': {
        'ru': {'name': '–ß—ë—Ä–Ω—ã–π –∫–æ–¥–µ–∫—Å –û–±–Ω—É–ª–µ–Ω–∏—è', 'desc': '–ö–Ω–∏–≥–∞ –≤ —Å—Ç–∞–ª—å–Ω–æ–º –ø–µ—Ä–µ–ø–ª—ë—Ç–µ, –∏—Å–ø–∏—Å–∞–Ω–Ω–∞—è –∏—Å—Ü–µ–ª—è—é—â–∏–º–∏ –∏ —Ä–∞–∑—Ä—É—à–∞—é—â–∏–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏.', 'emoji': 'üìï'},
        'ky': {'name': '–ù”©–ª–¥”©”© –ö–∞—Ä–∞ –ö–æ–¥–µ–∫—Å–∏', 'desc': '–ë–æ–ª–æ—Ç –º—É–∫–∞–±–∞—Å—ã–Ω–¥–∞–≥—ã –∞–π—ã–∫—Ç—ã—Ä—É—É—á—É –∂–∞–Ω–∞ –∂–æ–∫ –∫—ã–ª—É—É—á—É –∞–ª–≥–æ—Ä–∏—Ç–º–¥–µ—Ä –º–µ–Ω–µ–Ω –∂–∞–∑—ã–ª–≥–∞–Ω –∫–∏—Ç–µ–ø.', 'emoji': 'üìï'},
        'branch': 'technical'
    },
    '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': {
        'ru': {'name': '–°–µ—Ä–¥—Ü–µ –¶–ü ‚Äî –ö—Ä–µ–º–Ω–∏–µ–≤—ã–π –†–∞–∑—É–º', 'desc': '–ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–π —Å–µ—Ç—å—é –∫–∞–±–µ–ª–µ–π, –∫–∞–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é.', 'emoji': 'üñ•Ô∏è'},
        'ky': {'name': '–ë–≠–Ω–∏–Ω –ñ“Ø—Ä”©–≥“Ø ‚Äî –ö—Ä–µ–º–Ω–∏–π–ª–∏–∫ –ê–∫—ã–ª', 'desc': '–ù–µ–π—Ä–æ–Ω–¥—É–∫ —Ç–∞—Ä–º–∞–∫ —Å—ã—è–∫—Ç—É—É –∫–∞–±–µ–ª–¥–µ—Ä–¥–∏–Ω —Ç–∞—Ä–º–∞–≥—ã –º–µ–Ω–µ–Ω –∫—É—Ä—á–∞–ª–≥–∞–Ω —Å–æ–≥—É–ø —Ç—É—Ä–≥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä.', 'emoji': 'üñ•Ô∏è'},
        'branch': 'technical'
    },
    '–ú–µ—Ö–∞–Ω–∏–∫–∞ –∏ –º–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ': {
        'ru': {'name': '–ö–ª—é—á –ì–∏–≥–∞–Ω—Ç–∞', 'desc': '–û–≥—Ä–æ–º–Ω—ã–π, –ø–æ–∫—Ä—ã—Ç—ã–π —Ä–∂–∞–≤—á–∏–Ω–æ–π –≥–∞–µ—á–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —á–∏–Ω–∏—Ç—å –ª—é–±—É—é –º–∞—à–∏–Ω—É.', 'emoji': 'üîß'},
        'ky': {'name': '–ê–ª–ø—Ç—ã–Ω –ê—á–∫—ã—á—ã', 'desc': '–ê—Ä –∫–∞–Ω–¥–∞–π –º–∞—à–∏–Ω–∞–Ω—ã –æ“£–¥–æ–π –∞–ª–∞ —Ç—É—Ä–≥–∞–Ω —á–æ“£, –¥–∞—Ç—Ç–∞–ª–≥–∞–Ω –≥–∞–π–∫–∞ –∞—á–∫—ã—á.', 'emoji': 'üîß'},
        'branch': 'technical'
    },
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': {
        'ru': {'name': '–ò—Å–∫—Ä–æ–≤–æ–π –°–∏–º–≤–æ–ª', 'desc': '–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞, –∑–∞–∫–ª—é—á—ë–Ω–Ω–∞—è –≤ —Å—Ç–µ–∫–ª–æ, –∏—Å–ø—É—Å–∫–∞—é—â–∞—è –≤—Å–ø—ã—à–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏.', 'emoji': 'üí°'},
        'ky': {'name': '–£—á–∫—É–Ω –°–∏–º–≤–æ–ª—É', 'desc': '–ê–π–Ω–µ–∫ –∏—á–∏–Ω–µ –∫–∞–º–∞–ª–≥–∞–Ω, —ç–Ω–µ—Ä–≥–∏—è –∏–º–ø—É–ª—å—Å—Ç–∞—Ä—ã–Ω —á—ã–≥–∞—Ä–≥–∞–Ω –º–∏–∫—Ä–æ—Å—Ö–µ–º–∞.', 'emoji': 'üí°'},
        'branch': 'technical'
    },
    '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': {
        'ru': {'name': '–ú–µ—Ç—Ä –ú–æ–ª—á–∞—â–∏—Ö –ë–∞—à–µ–Ω', 'desc': '–õ–∏–Ω–µ–π–∫–∞ –∏–∑ –æ–∫–∞–º–µ–Ω–µ–≤—à–µ–≥–æ —Å—Ç–µ–∫–ª–∞, –ø–æ –ª–µ–≥–µ–Ω–¥–µ ‚Äî –∏–∑ —Ä—É–∏–Ω –ø–µ—Ä–≤–æ–π –±–∞—à–Ω–∏ –ù–æ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞.', 'emoji': 'üìè'},
        'ky': {'name': '–ñ—ã–º–∂—ã—Ä—Ç –ú—É–Ω–∞—Ä–∞–ª–∞—Ä –ú–µ—Ç—Ä', 'desc': '–ñ–∞“£—ã –®–∞–∞—Ä–¥—ã–Ω –±–∏—Ä–∏–Ω—á–∏ –º—É–Ω–∞—Ä–∞—Å—ã–Ω—ã–Ω —É—Ä–∞–Ω–¥—ã–ª–∞—Ä—ã–Ω–∞–Ω –∂–∞—Å–∞–ª–≥–∞–Ω —Ç–∞—à—Ç–∞–Ω–≥–∞–Ω –∞–π–Ω–µ–∫—Ç–µ–Ω –∂–∞—Å–∞–ª–≥–∞–Ω —Å—ã–∑–≥—ã—á.', 'emoji': 'üìè'},
        'branch': 'technical'
    },
    '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': {
        'ru': {'name': '–ö–∞–º–µ–Ω—å –û—Å–Ω–æ–≤–∞—Ç–µ–ª—è', 'desc': '–ì—Ä—É–±—ã–π, —Ç—Ä–µ—Å–Ω—É–≤—à–∏–π –∫–∏—Ä–ø–∏—á, –≤–∑—è—Ç—ã–π –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —É–±–µ–∂–∏—â–∞, —á—Ç–æ –≤—ã–¥–µ—Ä–∂–∞–ª–æ –û—á–∏—â–∞—é—â–µ–µ –ü–ª–∞–º—è.', 'emoji': 'üß±'},
        'ky': {'name': '–ù–µ–≥–∏–∑–¥”©”©—á“Ø–Ω“Ø–Ω –¢–∞—à—ã', 'desc': '–¢–∞–∑–∞–ª–æ–æ –ñ–∞–ª—ã–Ω—ã–Ω–∞ —Ç—É—Ä—É—à—Ç—É–∫ –±–µ—Ä–≥–µ–Ω –±–∏—Ä–∏–Ω—á–∏ –±–∞—à –∫–∞–ª–∫–∞–ª–æ–æ—á—É –∂–∞–π–¥–∞–Ω –∞–ª—ã–Ω–≥–∞–Ω –±“Ø–¥“Ø—Ä, –∂–∞—Ä–∞–∫–∞ –∫–µ—Ç–∫–µ–Ω –∫–∏—Ä–ø–∏—á.', 'emoji': 'üß±'},
        'branch': 'technical'
    },
    '–°–∏—Å—Ç–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞': {
        'ru': {'name': '–ö–æ–Ω—Å–æ–ª—å –ï–¥–∏–Ω–æ–≥–æ –ö–æ–Ω—Ç—Ä–æ–ª—è', 'desc': '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –º–∞—à–∏–Ω–∞–º–∏.', 'emoji': 'üéõÔ∏è'},
        'ky': {'name': '–ë–∏—Ä–¥–∏–∫—Ç“Ø“Ø –ö”©–∑”©–º”©–ª –ö–æ–Ω—Å–æ–ª—É', 'desc': '–ë–∞—Ä–¥—ã–∫ –∏—à—Ç–µ–ø –∂–∞—Ç–∫–∞–Ω –º–∞—à–∏–Ω–∞–ª–∞—Ä –º–µ–Ω–µ–Ω –±–∞–π–ª–∞–Ω—ã—à–∫–∞–Ω –±–∏–ª–µ–∫—Ç–µ–≥–∏ —Ç“Ø–∑–º”©–∫.', 'emoji': 'üéõÔ∏è'},
        'branch': 'technical'
    },
    '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': {
        'ru': {'name': '–ü—É–ª—å—Ç –ü—Ä–æ—Ç–æ–∫–æ–ª–∞ Œ©', 'desc': '–ü–æ—Ç—ë—Ä—Ç—ã–π –±–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –æ–¥–Ω–æ–π –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ —ç–∫—Ä–∞–Ω–æ–º.', 'emoji': 'üî¥'},
        'ky': {'name': 'Œ© –ü—Ä–æ—Ç–æ–∫–æ–ª—É–Ω—É–Ω –ø—É–ª—å—Ç—É', 'desc': '–ë–∏—Ä –∫—ã–∑—ã–ª –±–∞—Å–∫—ã—á –∂–∞–Ω–∞ —ç–∫—Ä–∞–Ω–¥—É—É —ç—Å–∫–∏—Ä–≥–µ–Ω –±–∞—à–∫–∞—Ä—É—É –±–ª–æ–≥—É.', 'emoji': 'üî¥'},
        'branch': 'technical'
    },
    '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞': {
        'ru': {'name': '–û–∫–æ –ú–µ—Ö–∞', 'desc': '–û–¥–∏–Ω–æ–∫–∏–π –æ–ø—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–Ω—Å–æ—Ä, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏–∑ –ø–∞–≤—à–µ–≥–æ —Ä–æ–±–æ—Ç–∞-–∑–∞—â–∏—Ç–Ω–∏–∫–∞.', 'emoji': 'üëÅÔ∏è'},
        'ky': {'name': '–ú–µ—Ö–∞–Ω—ã–Ω –ö”©–∑“Ø', 'desc': '–ö—É—Ä—É–ª–≥–∞–Ω —Ä–æ–±–æ—Ç-–∫–æ—Ä–≥–æ–æ—á—É–¥–∞–Ω –∞–ª—ã–Ω–≥–∞–Ω –∂–∞–ª–≥—ã–∑ –æ–ø—Ç–∏–∫–∞–ª—ã–∫ —Å–µ–Ω—Å–æ—Ä.', 'emoji': 'üëÅÔ∏è'},
        'branch': 'technical'
    },
    '–ê–≤–∏–∞- –∏ —Ä–∞–∫–µ—Ç–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ': {
        'ru': {'name': '–û–ø–µ—Ä–µ–Ω–∏–µ –ü–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ü–æ–ª—ë—Ç–∞', 'desc': '–û–±–ª–æ–º–æ–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–ª–Ω–æ–∫–∞, —á—Ç–æ –ø–æ–∫–∏–Ω—É–ª –ó–µ–º–ª—é.', 'emoji': 'üõ©Ô∏è'},
        'ky': {'name': '–ê–∫—ã—Ä–∫—ã –£—á—É—É–Ω—É–Ω –ö–∞–Ω–∞—Ç—Ç–∞—Ä—ã', 'desc': '–ñ–µ—Ä–¥–∏ —Ç–∞—à—Ç–∞–≥–∞–Ω –∞–∫—ã—Ä–∫—ã —á–µ–ª–Ω–æ–∫—Ç—É–Ω —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä—É–Ω—É–Ω —Å—ã–Ω—ã–≥—ã.', 'emoji': 'üõ©Ô∏è'},
        'branch': 'technical'
    },
    # –°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≤–µ—Ç–∫–∞
    '–≠–∫–æ–Ω–æ–º–∏–∫–∞': {
        'ru': {'name': '–í–µ—Å—ã –ú–µ–¥–Ω–æ–≥–æ –ò–∑–æ–±–∏–ª–∏—è', 'desc': '–¢–æ—Ç–µ–º –≤ –≤–∏–¥–µ –¥—Ä–µ–≤–Ω–∏—Ö –≤–µ—Å–æ–≤, –Ω–∞ –æ–¥–Ω–æ–π —á–∞—à–µ ‚Äî –∑–µ—Ä–Ω–æ, –Ω–∞ –¥—Ä—É–≥–æ–π ‚Äî —Å–ª–∏—Ç–æ–∫ –∑–æ–ª–æ—Ç–∞.', 'emoji': '‚öñÔ∏è'},
        'ky': {'name': '–ñ–µ–∑ –ú–æ–ª—á—É–ª—É–∫ –¢–∞—Ä–∞–∑–∞—Å—ã', 'desc': '–ë–∞–π—ã—Ä–∫—ã —Ç–∞—Ä–∞–∑–∞–ª–∞—Ä —Ç“Ø—Ä“Ø–Ω–¥”©–≥“Ø —Ç–æ—Ç–µ–º, –±–∏—Ä —Ç–∞–±–∞–≥—ã–Ω–¥–∞ ‚Äî –¥–∞–Ω, —ç–∫–∏–Ω—á–∏—Å–∏–Ω–¥–µ ‚Äî –∞–ª—Ç—ã–Ω –∫—É–π–º–∞—Å—ã.', 'emoji': '‚öñÔ∏è'},
        'branch': 'social_economic'
    },
    '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': {
        'ru': {'name': '–ñ–µ–∑–ª –ß–µ—Ç—ã—Ä—ë—Ö –ö–æ–ª–æ–Ω–Ω', 'desc': '–†–∏—Ç—É–∞–ª—å–Ω—ã–π –∂–µ–∑–ª —Å –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–æ–π —á–µ—Ç—ã—Ä—ë—Ö —Å—Ç–∏—Ö–∏–π: –†–µ—Å—É—Ä—Å—ã, –í—Ä–µ–º—è, –õ—é–¥–∏ –∏ –¶–µ–ª—å.', 'emoji': 'ü™Ñ'},
        'ky': {'name': '–¢”©—Ä—Ç –¢“Ø—Ä–∫“Ø–∫ –¢–∞—è–≥—ã', 'desc': '–¢”©—Ä—Ç —Å—Ç–∏—Ö–∏—è –æ—é–ø –∂–∞–∑—ã–ª–≥–∞–Ω: –†–µ—Å—É—Ä—Å—Ç–∞—Ä, –£–±–∞–∫—ã—Ç, –ê–¥–∞–º–¥–∞—Ä –∂–∞–Ω–∞ –ú–∞–∫—Å–∞—Ç.', 'emoji': 'ü™Ñ'},
        'branch': 'social_economic'
    },
    '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–ö—Ä–∏—Å—Ç–∞–ª–ª –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ó–µ—Ä–∫–∞–ª–∞', 'desc': '–ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π –≤–∏–¥–∏—Ç —Å–≤–æ—ë –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤–Ω–µ—à–Ω–µ–µ, –∞ –¥—É—à–µ–≤–Ω–æ–µ.', 'emoji': 'üîÆ'},
        'ky': {'name': '–ò—á–∫–∏ –ö“Ø–∑–≥“Ø –ö—Ä–∏—Å—Ç–∞–ª–ª—ã', 'desc': '–ñ–∞—Ä—ã–º-–∂–∞—Ä—Ç—ã–ª–∞–π –∞—á—ãk –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –∞–Ω–¥–∞ –∞—Ä –±–∏—Ä –∫–∏—à–∏ ”©–∑ —á–∞–≥—ã–ª—ã—à—ã–Ω –∫”©—Ä”©—Ç, –±–∏—Ä–æ–∫ —Å—ã—Ä—Ç–∫—ã —ç–º–µ—Å, –∏—á–∫–∏ —á–∞–≥—ã–ª—ã—à—ã–Ω.', 'emoji': 'üîÆ'},
        'branch': 'social_economic'
    },
    '–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–ü–µ—Ä–æ –ó–∞–∫–æ–Ω–∞', 'desc': '–°–∏–º–≤–æ–ª –¥—Ä–µ–≤–Ω–µ–≥–æ –ø—Ä–∞–≤–∞: –ø–µ—Ä–æ, –Ω–∞–ø–∏—Å–∞–≤—à–µ–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –æ —Å–≤–æ–±–æ–¥–µ –∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ.', 'emoji': 'ü™∂'},
        'ky': {'name': '–ú—ã–π–∑–∞–º –ö–∞–Ω–∞—Ç—ã', 'desc': '–ë–∞–π—ã—Ä–∫—ã —É–∫—É–∫—Ç—É–Ω —Å–∏–º–≤–æ–ª—É: —ç—Ä–∫–∏–Ω–¥–∏–∫ –∂–∞–Ω–∞ —Ç–µ“£–¥–∏–∫ –∂”©–Ω“Ø–Ω–¥”© –±–∏—Ä–∏–Ω—á–∏ —Å”©–∑–¥”©—Ä–¥“Ø –∂–∞–∑–≥–∞–Ω –∫–∞–Ω–∞—Ç.', 'emoji': 'ü™∂'},
        'branch': 'social_economic'
    },
    '–°–æ—Ü–∏–æ–ª–æ–≥–∏—è': {
        'ru': {'name': '–°–µ—Ç—å –¢—ã—Å—è—á–∏ –ì–æ–ª–æ—Å–æ–≤', 'desc': '–¢–∫–∞–Ω—å, —Å–æ—Ç–∫–∞–Ω–Ω–∞—è –∏–∑ –Ω–∏—Ç–µ–π, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—É–¥—å–±—É.', 'emoji': 'üï∏Ô∏è'},
        'ky': {'name': '–ú–∏“£ “Æ–Ω–¥“Ø–Ω –¢–æ—Ä—É', 'desc': '–ñ–∏–ø—Ç–µ—Ä–¥–µ–Ω —Ç–æ–∫—É–ª–≥–∞–Ω –∫–µ–∑–¥–µ–º–µ, –∞—Ä –±–∏—Ä –∂–∏–±–∏ ”©–∑“Ø–Ω—á”© —Ç–∞–≥–¥—ã—Ä–¥—ã –±–∏–ª–¥–∏—Ä–µ—Ç.', 'emoji': 'üï∏Ô∏è'},
        'branch': 'social_economic'
    },
    '–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': {
        'ru': {'name': '–Ø–¥—Ä–æ –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞', 'desc': '–°–≤–µ—Ç—è—â–∏–π—Å—è –∫—É–±, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–≤–∏–∂—É—Ç—Å—è –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–ª–æ–≤–Ω–æ —Ä–µ–∫–∏ —Å–≤–µ—Ç–∞.', 'emoji': 'üßä'},
        'ky': {'name': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–¥—É–Ω –Ø–¥—Ä–æ—Å—É', 'desc': '–ò—á–∏–Ω–¥–µ –º–∞–∞–ª—ã–º–∞—Ç –∞–≥—ã–º–¥–∞—Ä—ã —Å—É—É –¥–∞—Ä—ã—è–ª–∞—Ä—ã —Å—ã—è–∫—Ç—É—É –∫—ã–π–º—ã–ª–¥–∞–≥–∞–Ω –∂–∞—Ä–∫—ã—Ä–∞–≥–∞–Ω –∫—É–±.', 'emoji': 'üßä'},
        'branch': 'social_economic'
    },
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': {
        'ru': {'name': '–§–∞–∫–µ–ª –ü–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏—è', 'desc': '–û–≥–Ω–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª, –∑–∞–∂–∏–≥–∞–µ–º—ã–π –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ –∏–¥–µ–∏.', 'emoji': 'üî•'},
        'ky': {'name': '–ö–∞–π—Ä–∞ –¢“Ø–∑“Ø“Ø –ú–∞—à–∞–ª–∞—Å—ã', 'desc': '–ò–¥–µ—è —Ç”©—Ä”©–ª–≥”©–Ω–¥”© –∫“Ø–π“Ø“Ø—á“Ø –æ—Ç—Ç—É —Å–∏–º–≤–æ–ª.', 'emoji': 'üî•'},
        'branch': 'social_economic'
    },
    '–§–∏–Ω–∞–Ω—Å—ã –∏ –∫—Ä–µ–¥–∏—Ç': {
        'ru': {'name': '–ú–æ–Ω–µ—Ç–∞ –í–µ—á–Ω–æ–≥–æ –û–±–º–µ–Ω–∞', 'desc': '–° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî —Ö–ª–µ–±, —Å –¥—Ä—É–≥–æ–π ‚Äî —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ.', 'emoji': 'ü™ô'},
        'ky': {'name': '–¢“Ø–±”©–ª“Ø–∫ –ê–ª–º–∞—à—É—É –ú–æ–Ω–µ—Ç–∞—Å—ã', 'desc': '–ë–∏—Ä –∂–∞–≥—ã–Ω–¥–∞ ‚Äî –Ω–∞–Ω, —ç–∫–∏–Ω—á–∏ –∂–∞–≥—ã–Ω–¥–∞ ‚Äî –∫–æ–ª –∞–ª—ã—à—É—É.', 'emoji': 'ü™ô'},
        'branch': 'social_economic'
    },
    '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': {
        'ru': {'name': '–ö–ª—é—á –æ—Ç –í—Ä–∞—Ç –ì–æ—Ä–æ–¥–∞', 'desc': '–û–≥—Ä–æ–º–Ω—ã–π –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∫–ª—é—á —Å —Ä–µ–∑—å–±–æ–π –≤ —Ñ–æ—Ä–º–µ –∫–∞—Ä—Ç —É–ª–∏—Ü.', 'emoji': 'üóùÔ∏è'},
        'ky': {'name': '–®–∞–∞—Ä –î–∞—Ä–±–∞–∑–∞—Å—ã–Ω—ã–Ω –ê—á–∫—ã—á—ã', 'desc': '–ö”©—á”© –∫–∞—Ä—Ç–∞–ª–∞—Ä—ã —Ñ–æ—Ä–º–∞—Å—ã–Ω–¥–∞–≥—ã —Å–∞–π—ã –±–∞—Ä —á–æ“£ –º–µ—Ç–∞–ª–ª –∞—á–∫—ã—á.', 'emoji': 'üóùÔ∏è'},
        'branch': 'social_economic'
    },
    '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è': {
        'ru': {'name': '–ß–∞—à–∞ –ù–∞—Ä–æ–¥–æ–≤', 'desc': '–ö—É–±–æ–∫, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏–∑ —á–∞—Å—Ç–µ–π –¥–µ—Å—è—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä, –∏–Ω–∫—Ä—É—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—Ä–∞–∑–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.', 'emoji': 'üèÜ'},
        'ky': {'name': '–≠–ª–¥–µ—Ä –ß”©–π—á”©–≥“Ø', 'desc': '–û–Ω —Ç“Ø—Ä–¥“Ø“Ø –º–∞–¥–∞–Ω–∏—è—Ç—Ç—ã–Ω –±”©–ª“Ø–∫—Ç”©—Ä“Ø–Ω”©–Ω –∂–∞—Å–∞–ª–≥–∞–Ω, –∞—Ä –∫–∞–Ω–¥–∞–π —Ç–∏–ª–¥–µ—Ä–¥–µ —Ñ—Ä–∞–∑–∞–ª–∞—Ä –º–µ–Ω–µ–Ω –∏–Ω–∫—Ä—É—Å—Ç–∞—Ü–∏—è–ª–∞–Ω–≥–∞–Ω –∫—É–±–æ–∫.', 'emoji': 'üèÜ'},
        'branch': 'social_economic'
    },
    # –¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞
    '–î–∏–∑–∞–π–Ω': {
        'ru': {'name': '–ö—Ä–∏—Å—Ç–∞–ª–ª –ö–æ–º–ø–æ–∑–∏—Ü–∏–∏', 'desc': '–ö—Ä–∏—Å—Ç–∞–ª–ª, –≥—Ä–∞–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç—Ä–∞–∂–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, —Ü–≤–µ—Ç–æ–≤—ã–µ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —Å–∏–ª—É —Ñ–æ—Ä–º—ã.', 'emoji': 'üíé'},
        'ky': {'name': '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ö—Ä–∏—Å—Ç–∞–ª–ª—ã', 'desc': '–ò–¥–µ–∞–ª–¥—É—É –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–ª–∞—Ä–¥—ã, —Ç“Ø—Å—Ç“Ø–∫ –≥–∞—Ä–º–æ–Ω–∏—è–ª–∞—Ä–¥—ã –∂–∞–Ω–∞ —Ñ–æ—Ä–º–∞–Ω—ã–Ω –∫“Ø—á“Ø–Ω —á–∞–≥—ã–ª–¥—ã—Ä–≥–∞–Ω –∫—Ä–∏—Å—Ç–∞–ª–ª.', 'emoji': 'üíé'},
        'branch': 'creative_art'
    },
    '–ò–∑–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ': {
        'ru': {'name': '–ü–µ—Ä–≤–∞—è –ö–∏—Å—Ç—å –°–æ—Ç–≤–æ—Ä–µ–Ω–∏—è', 'desc': '–ö–∏—Å—Ç—å, –≤—ã—Ä–µ–∑–∞–Ω–Ω–∞—è –∏–∑ –¥–µ—Ä–µ–≤–∞ –º–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ª–µ—Å–∞, –∫–æ—Ç–æ—Ä–æ–π, –ø–æ –ª–µ–≥–µ–Ω–¥–µ, –±—ã–ª –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π —Ä–∞—Å—Å–≤–µ—Ç.', 'emoji': 'üñåÔ∏è'},
        'ky': {'name': '–ñ–∞—Ä–∞—Ç—É—É–Ω—É–Ω –ë–∏—Ä–∏–Ω—á–∏ –ö—ã–ª –∫–∞–ª–µ–º–∏', 'desc': '–õ–µ–≥–µ–Ω–¥–∞ –±–æ—é–Ω—á–∞, –±–∏—Ä–∏–Ω—á–∏ —Ç–∞“£ –∞—Ç—É—É–Ω—É —á–∏–π–≥–µ–Ω, –º–∏—Ñ—Ç–∏–∫ —Ç–æ–∫–æ–π–¥—É–Ω –∂—ã–≥–∞—á—ã–Ω–∞–Ω –∂–∞—Å–∞–ª–≥–∞–Ω –∫—ã–ª –∫–∞–ª–µ–º.', 'emoji': 'üñåÔ∏è'},
        'branch': 'creative_art'
    },
    '–ú—É–∑—ã–∫–∞ –∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ': {
        'ru': {'name': '–ó–æ–ª–æ—Ç–æ–π –ö–∞–º–µ—Ä—Ç–æ–Ω –ì–∞—Ä–º–æ–Ω–∏–∏', 'desc': '–ö–∞–º–µ—Ä—Ç–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ —É–¥–∞—Ä–µ –ø–æ –≤–æ–∑–¥—É—Ö—É –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ç–∏—Ö–∞—Ç—å.', 'emoji': 'üéº'},
        'ky': {'name': '–ì–∞—Ä–º–æ–Ω–∏—è –ê–ª—Ç—ã–Ω –ö–∞–º–µ—Ä—Ç–æ–Ω—É', 'desc': '–ê–±–∞ –±–æ—é–Ω—á–∞ —á—ã–∫–∫–∞–Ω–¥–∞ —Ä–µ–∞–ª–¥—É—É–ª—Ék—Ç—É —Ç—ã–Ω—á—Ç–∞–Ω–¥—ã—Ä—É—É—á—É –∫–∞–º–µ—Ä—Ç–æ–Ω.', 'emoji': 'üéº'},
        'branch': 'creative_art'
    },
    '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ —É—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–∞': {
        'ru': {'name': '–ö–∞–º–µ–Ω—å –û—Å–Ω–æ–≤–∞—Ç–µ–ª—è', 'desc': '–ë–ª–æ–∫ –∏–∑ —á–∏—Å—Ç–æ–≥–æ –º—Ä–∞–º–æ—Ä–∞, –±—É–¥—Ç–æ —Å—Ä–µ–∑–∞–Ω–Ω—ã–π —Å –¥—Ä–µ–≤–Ω–µ–≥–æ —Ö—Ä–∞–º–∞.', 'emoji': 'üèõÔ∏è'},
        'ky': {'name': '–ù–µ–≥–∏–∑–¥”©”©—á“Ø–Ω“Ø–Ω –¢–∞—à—ã', 'desc': '–ë–∞–π—ã—Ä–∫—ã —Ö—Ä–∞–º–¥–∞–Ω –∫–µ—Å–∏–ª–≥–µ–Ω–¥–µ–π —Ç–∞–∑–∞ –º—Ä–∞–º–æ—Ä–¥–æ–Ω –∂–∞—Å–∞–ª–≥–∞–Ω –±–ª–æ–∫.', 'emoji': 'üèõÔ∏è'},
        'branch': 'creative_art'
    },
    '–ê–∫—Ç—ë—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ': {
        'ru': {'name': '–ú–∞—Å–∫–∞ –ß–∏—Å—Ç–æ–π –≠–º–æ—Ü–∏–∏', 'desc': '–ú–∞—Å–∫–∞, –ø–æ–ª–æ–≤–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±–µ–ª–∞, –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî —á—ë—Ä–Ω–∞, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –º–µ–Ω—è–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—É–∫, —á—Ç–æ –¥–µ—Ä–∂–∞—Ç –µ—ë.', 'emoji': 'üé≠'},
        'ky': {'name': '–¢–∞–∑–∞ –≠–º–æ—Ü–∏—è –ú–∞—Å–∫–∞—Å—ã', 'desc': '–ñ–∞—Ä—ã–º—ã –∞–∫, –∂–∞—Ä—ã–º—ã –∫–∞—Ä–∞, –∫–∞—Ä–º–∞–≥–∞–Ω –∫–æ–ª–¥–æ—Ä–≥–æ –∂–∞—Ä–∞—à–∞ –∞–Ω—ã–Ω —Ç—É—é–Ω—Ç–º–∞—Å—ã ”©–∑–≥”©—Ä–≥”©–Ω –º–∞—Å–∫–∞.', 'emoji': 'üé≠'},
        'branch': 'creative_art'
    },
    '–†–µ–∂–∏—Å—Å—É—Ä–∞': {
        'ru': {'name': '–û–∫–æ –í–µ–ª–∏–∫–æ–π –°—Ü–µ–Ω—ã', 'desc': '–õ–∏–Ω–∑–∞ –≤ –æ–ø—Ä–∞–≤–µ, –ø–æ—Ö–æ–∂–µ–π –Ω–∞ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä.', 'emoji': 'üé•'},
        'ky': {'name': '–£–ª—É—É –°–∞—Ö–Ω–∞ –ö”©–∑“Ø', 'desc': '–¢–µ–∞—Ç—Ä–∞–ª–¥—ãk –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–≥–æ –æ–∫—à–æ—à –æ–ø—Ä–∞–≤–∞–¥–∞–≥—ã –ª–∏–Ω–∑–∞.', 'emoji': 'üé•'},
        'branch': 'creative_art'
    },
    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è': {
        'ru': {'name': '–û–±—ä–µ–∫—Ç–∏–≤ –í—Ä–µ–º–µ–Ω–∏', 'desc': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç–∏–≤, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–∞—â–∞—é—Ç—Å—è –æ–±—Ä–∞–∑—ã –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç–ø–æ—Ö.', 'emoji': 'üì∑'},
        'ky': {'name': '–£–±–∞–∫—ã—Ç –û–±—ä–µ–∫—Ç–∏–≤–∏', 'desc': '–ò—á–∏–Ω–¥–µ ”©—Ç–∫”©–Ω –¥–æ–æ—Ä–ª–æ—Ä–¥—É–Ω –æ–±—Ä–∞–∑–¥–∞—Ä—ã –∞–π–ª–∞–Ω–≥–∞–Ω –ª–µ–≥–µ–Ω–¥–∞—Ä–ª—Éu –æ–±—ä–µ–∫—Ç–∏–≤.', 'emoji': 'üì∑'},
        'branch': 'creative_art'
    },
    '–•–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è': {
        'ru': {'name': '–°–∞–Ω–¥–∞–ª–∏–∏ –í–µ—Ç—Ä–∞', 'desc': '–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è –æ–±—É–≤—å, —Å–ø–ª–µ—Ç—ë–Ω–Ω–∞—è –∏–∑ —à–µ–ª–∫–∞ –∏ –º–∏—Ñ–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–≤—ã.', 'emoji': 'ü©∞'},
        'ky': {'name': '–®–∞–º–∞–ª –°–∞–Ω–¥–∞–ª–∏–π–ª–µ—Ä–∏', 'desc': '–ñ–∏–±–µ–∫ –∂–∞–Ω–∞ –º–∏—Ñ—Ç–∏k —á”©–ø—Ç”©–Ω —Ç–æ–∫—É–ª–≥–∞–Ω –±–∏–π –±—É—Ç –∫–∏–π–∏–º–∏.', 'emoji': 'ü©∞'},
        'branch': 'creative_art'
    },
    '–ú–æ–¥–∞ –∏ —Ç–µ–∫—Å—Ç–∏–ª—å': {
        'ru': {'name': '–ù–∏—Ç—å –ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'desc': '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Å–µ—Ä–µ–±—Ä—è–Ω–∞—è –Ω–∏—Ç—å, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∏ —Å–æ—Ç–∫–∞–Ω—ã –ø–µ—Ä–≤—ã–µ –æ–±—Ä–∞–∑—ã —Å—Ç–∏–ª—è.', 'emoji': 'üßµ'},
        'ky': {'name': '–ö–∞–π—Ä–∞ –¢“Ø–∑“Ø“Ø –ñ–∏–±–∏', 'desc': '–ë–∏—Ä–∏–Ω—á–∏ —Å—Ç–∏–ª—å –æ–±—Ä–∞–∑–¥–∞—Ä—ã —Ç–æ–∫—É–ª–≥–∞–Ω —Ç“Ø–±”©–ª“Ø–∫ –∫“Ø–º“Ø—à –∂–∏–ø.', 'emoji': 'üßµ'},
        'branch': 'creative_art'
    },
    '–ê—Ä—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': {
        'ru': {'name': '–°–∫–∏–ø–µ—Ç—Ä –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è', 'desc': '–ü–æ—Å–æ—Ö, –∏–Ω–∫—Ä—É—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª–∞–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤: –∫–∏—Å—Ç—å, –º–∞—Å–∫–∞, –∫–∞–º–µ—Ä—Ç–æ–Ω.', 'emoji': 'üé®'},
        'ky': {'name': '–®—ã–∫—Ç–∞–Ω–¥—ã—Ä—É—É –°–∫–∏–ø–µ—Ç—Ä–∏', 'desc': '–ò—Å–∫—É—Å—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–¥–æ—Ä—É –º–µ–Ω–µ–Ω –∏–Ω–∫—Ä—É—Å—Ç–∞—Ü–∏—è–ª–∞–Ω–≥–∞–Ω: –∫—ã–ª –∫–∞–ª–µ–º, –º–∞—Å–∫–∞, –∫–∞–º–µ—Ä—Ç–æ–Ω.', 'emoji': 'üé®'},
        'branch': 'creative_art'
    },
    # –ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≤–µ—Ç–∫–∞
    '–°–ª–µ—Å–∞—Ä–Ω–æ–µ –¥–µ–ª–æ': {
        'ru': {'name': '–ö–ª—é—á –í–µ—á–Ω–æ–≥–æ –ó–∞–∑–æ—Ä–∞', 'desc': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–∞–µ—á–Ω—ã–π –∫–ª—é—á, –≤—Ä—É—á—ë–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä—É, —á—å–∏ —Ä—É–∫–∏ ¬´–∑–∞–∫—Ä—É—Ç–∏–ª–∏¬ª –º–æ—Å—Ç —á–µ—Ä–µ–∑ –±—É—Ä–Ω—É—é —Ä–µ–∫—É.', 'emoji': 'üî©'},
        'ky': {'name': '–¢“Ø–±”©–ª“Ø–∫ –ö–µ–Ω–µ–º—Ç–µ –ê—á–∫—ã—á—ã', 'desc': '–ö–æ–ª–¥–æ—Ä—É —à–∞—Ä–∫—ã—Ä–∞—Ç–º–∞–Ω—ã–Ω –∞—Ä–∫—ã–ª—É—É –∫”©–ø“Ø—Ä”©–≥”© "–±—É—Ä–∞–ø" —Å–∞–ª–≥–∞–Ω —É—Å—Ç–∞–≥–∞ –±–µ—Ä–∏–ª–≥–µ–Ω –ª–µ–≥–µ–Ω–¥–∞–ª—É—É –≥–∞–π–∫–∞ –∞—á–∫—ã—á.', 'emoji': 'üî©'},
        'branch': 'applied_technology'
    },
    '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂': {
        'ru': {'name': '–ò—Å–∫—Ä–∞ –ü–µ—Ä–≤–æ—Ä–æ–¥–Ω–æ–π –°–µ—Ç–∏', 'desc': '–û—Å–∫–æ–ª–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–±–µ–ª—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª–∏—Å—å —É–ª–∏—á–Ω—ã–µ —Ñ–æ–Ω–∞—Ä–∏.', 'emoji': '‚ö°'},
        'ky': {'name': '–ê–ª–≥–∞—á–∫—ã –¢–∞—Ä–º–∞–∫—Ç—ã–Ω –£—á–∫—É–Ω—É', 'desc': '–ö”©—á”© —Ñ–æ–Ω–∞—Ä–ª–∞—Ä—ã –∫“Ø–π–≥”©–Ω –±–∏—Ä–∏–Ω—á–∏ –∫–∞–±–µ–ª–¥–∏–Ω —Å—ã–Ω—ã–≥—ã.', 'emoji': '‚ö°'},
        'branch': 'applied_technology'
    },
    '–ê–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫–∞': {
        'ru': {'name': '–ö–æ–ª–µ–Ω–≤–∞–ª –ú–∏—Ä–∞', 'desc': '–ß–∞—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ –ø–µ—Ä–≤—É—é –º–∞—à–∏–Ω—É –≤–µ–ª–∏–∫–æ–≥–æ –∫–æ—á–µ–≤–Ω–∏–∫–∞.', 'emoji': 'üöó'},
        'ky': {'name': '–î“Ø–π–Ω”©–Ω“Ø–Ω –ö–æ–ª–µ–Ω–≤–∞–ª—ã', 'desc': '–£–ª—É—É –∫”©—á–º”©–Ω–¥“Ø–Ω –±–∏—Ä–∏–Ω—á–∏ –º–∞—à–∏–Ω–∞—Å—ã–Ω –∫“Ø–π–≥“Ø–∑–≥”©–Ω –∫—ã–π–º—ã–ª–¥–∞—Ç–∫—ã—á—Ç—ã–Ω –±”©–ª“Ø–≥“Ø.', 'emoji': 'üöó'},
        'branch': 'applied_technology'
    },
    '–°–≤–∞—Ä–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': {
        'ru': {'name': '–ü–ª–∞–º—è –°–∫—Ä–µ–ø–ª—è—é—â–µ–≥–æ –ë—Ä–∞—Ç—Å—Ç–≤–∞', 'desc': '–†–∏—Ç—É–∞–ª—å–Ω—ã–π —Å–≤–∞—Ä–æ—á–Ω—ã–π —à–æ–≤, –æ—Å—Ç–∞–≤—à–∏–π—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –±–∞–ª–∫–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –∫—É–ø–æ–ª–∞.', 'emoji': 'üî•'},
        'ky': {'name': '–ë–∏—Ä–∏–≥“Ø“Ø—á“Ø –ë–∏—Ä –¢—É—É–≥–∞–Ω–¥—ã–∫—Ç—ã–Ω –ñ–∞–ª—ã–Ω—ã', 'desc': '–õ–µ–≥–µ–Ω–¥–∞–ª—É—É –∫“Ø–º–±”©–∑–¥“Ø–Ω –Ω–µ–≥–∏–∑–≥–∏ —É—Å—Ç—É–Ω—É–Ω–¥–∞ –∫–∞–ª–≥–∞–Ω —Ä–∏—Ç—É–∞–ª–¥—ã–∫ —à–∏—Ä–µ—Ç“Ø“Ø –∂–∏–≥–∏.', 'emoji': 'üî•'},
        'branch': 'applied_technology'
    },
    '–¢–æ–∫–∞—Ä–Ω–æ–µ –∏ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–µ –¥–µ–ª–æ': {
        'ru': {'name': '–û—Å—å –í–µ—á–Ω–æ–π –¢–æ—á–Ω–æ—Å—Ç–∏', 'desc': '–°–≤–µ—Ä–ª–æ, –≤—ã—Ç–æ—á–µ–Ω–Ω–æ–µ –≤—Ä—É—á–Ω—É—é –¥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å–∏–º–º–µ—Ç—Ä–∏–∏.', 'emoji': 'üõ†Ô∏è'},
        'ky': {'name': '–¢“Ø–±”©–ª“Ø–∫ –¢–∞–∫—Ç—ã–∫—Ç—ã–Ω –û–≥—É', 'desc': '–ö–æ–ª–¥–æ–Ω —Ç–æ–ª—É–∫ —Å–∏–º–º–µ—Ç—Ä–∏—è–≥–∞ —á–µ–π–∏–Ω –∂–∞—Å–∞–ª–≥–∞–Ω –±—É—Ä–≥—É.', 'emoji': 'üõ†Ô∏è'},
        'branch': 'applied_technology'
    },
    '–ü–æ–≤–∞—Ä—Å–∫–æ–µ –¥–µ–ª–æ': {
        'ru': {'name': '–ß–µ—Ä–ø–∞–∫ –î–µ–≤—è—Ç–∏ –°—Ç–æ–ª–æ–≤', 'desc': '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –ø–æ–ª–æ–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–¥–∞–ª–∏ –µ–¥—É –≤ –¥–µ–Ω—å –ø–µ—Ä–µ–º–∏—Ä–∏—è.', 'emoji': 'ü•Ñ'},
        'ky': {'name': '–¢–æ–≥—É–∑ –°—Ç–æ–ª–¥—É–Ω –ß”©–º“Ø—á“Ø', 'desc': '–¢—ã–Ω—á—Ç—ã–∫ –∫“Ø–Ω“Ø —Ç–∞–º–∞–∫ –±–µ—Ä–∏–ª–≥–µ–Ω –∂—ã–≥–∞—á —á”©–º“Ø—á.', 'emoji': 'ü•Ñ'},
        'branch': 'applied_technology'
    },
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞': {
        'ru': {'name': '–†–µ–º–µ–Ω—å –ü–µ—Ä–µ—Ö–æ–¥–∞ –ü—É—Ç–∏', 'desc': '–§—Ä–∞–≥–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ä–µ–º–Ω—è, —Å–ø–∞—Å—à–µ–≥–æ –∫–æ–ª–æ–Ω–Ω—É –≤ –±—É—Ä—é.', 'emoji': 'üöö'},
        'ky': {'name': '–ñ–æ–ª ”®—Ç“Ø“Ø –ö–∞–π—ã—à—ã', 'desc': '–ë–æ—Ä–æ–æ–Ω–¥–æ –∫–æ–ª–æ–Ω–Ω–∞–Ω—ã —Å–∞–∫—Ç–∞–ø –∫–∞–ª–≥–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—Ç—É–∫ –∫–∞–π—ã—à—Ç—ã–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏.', 'emoji': 'üöö'},
        'branch': 'applied_technology'
    },
    '–°—Ç–æ–ª—è—Ä–Ω–æ–µ –¥–µ–ª–æ': {
        'ru': {'name': '–†—É–±–∞–Ω–æ–∫ –ú—É–¥—Ä–æ–≥–æ –°—Ç—Ä–æ–∏—Ç–µ–ª—è', 'desc': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–º –≤—ã—Ä–æ–≤–Ω—è–ª–∏ –¥–æ—Å–∫–∏ –¥–ª—è –¥–æ–º–∞ –≤–µ—á–Ω–æ–π –∑–∏–º—ã.', 'emoji': 'ü™ö'},
        'ky': {'name': '–ê–∫—ã–ª–º–∞–Ω –ö—É—Ä—É–ª—É—à—á—É–Ω—É–Ω –†—É–±–∞–Ω–æ–≥—É', 'desc': '–¢“Ø–±”©–ª“Ø–∫ –∫—ã—à “Ø–π“Ø “Ø—á“Ø–Ω —Ç–∞–∫—Ç–∞–π–ª–∞—Ä–¥—ã —Ç–µ–≥–∏–∑–¥–µ–≥–µ–Ω –∞—Å–ø–∞–ø.', 'emoji': 'ü™ö'},
        'branch': 'applied_technology'
    },
    '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π': {
        'ru': {'name': '–£—Ä–æ–≤–µ–Ω—å –û—Å–Ω–æ–≤–∞—Ç–µ–ª—è', 'desc': '–ë—Ä–æ–Ω–∑–æ–≤—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–º –≤—ã—Ä–æ–≤–Ω—è–ª–∏ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Ç—É—à–∏.', 'emoji': 'üìê'},
        'ky': {'name': '–ù–µ–≥–∏–∑–¥”©”©—á“Ø–Ω“Ø–Ω –î–µ“£–≥—ç—ç–ª–∏', 'desc': '–†–∞—Ç—É—à–∞–Ω—ã–Ω –Ω–µ–≥–∏–∑–∏–Ω —Ç–µ–≥–∏–∑–¥–µ–≥–µ–Ω –∫–æ–ª–¥–æ–Ω—É–ª–≥–∞–Ω –∫–æ–ª–æ –∫—É—Ä—É–ª—É—à –¥–µ“£–≥—ç—ç–ª–∏.', 'emoji': 'üìê'},
        'branch': 'applied_technology'
    },
    '–ú–∞—à–∏–Ω–∏—Å—Ç –ø–æ–¥—ä–µ–º–Ω—ã—Ö –º–∞—à–∏–Ω': {
        'ru': {'name': '–®—Ç—É—Ä–≤–∞–ª –°—Ç–∞–ª—å–Ω–æ–≥–æ –í–µ–ª–∏–∫–∞–Ω–∞', 'desc': '–†—É–ª—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—ä—ë–º–Ω–æ–≥–æ –∫—Ä–∞–Ω–∞, –ø–æ–¥–Ω—è–≤—à–µ–≥–æ –∫–æ–ª–æ–∫–æ–ª —Å–æ–±–æ—Ä–∞.', 'emoji': '‚öôÔ∏è'},
        'ky': {'name': '–ë–æ–ª–æ—Ç –ê–ª–ø—Ç—ã–Ω –®—Ç—É—Ä–≤–∞–ª—ã', 'desc': '–°–æ–±–æ—Ä–¥—É–Ω –∫–æ“£–≥—É—Ä–æ–æ—Å—É–Ω –∫”©—Ç”©—Ä–≥”©–Ω –±–∏—Ä–∏–Ω—á–∏ –∫”©—Ç”©—Ä–≥“Ø—á –∫—Ä–∞–Ω–¥—ã–Ω —Ä—É–ª–∏.', 'emoji': '‚öôÔ∏è'},
        'branch': 'applied_technology'
    }
}

# --- –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ 10 –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é –≤–µ—Ç–∫—É ---
def _filter_artifacts_by_branch():
    from collections import defaultdict
    filtered = {}
    branch_count = defaultdict(int)
    for k, v in ARTIFACTS_BY_PROFESSION.items():
        branch = v.get('branch')
        if branch and branch_count[branch] < 10:
            filtered[k] = v
            branch_count[branch] += 1
    return filtered
ARTIFACTS_BY_PROFESSION = _filter_artifacts_by_branch()

async def get_user_data_from_api(telegram_id: int):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}?telegram_id={telegram_id}") as resp:
            if resp.status == 200:
                return await resp.json()
            return None

@router.message(Command("test"))
async def start_test(message: Message, state: FSMContext):
    user_data = await get_user_data_from_api(message.from_user.id)
    if not user_data or not user_data.get("fio"):
        lang = await get_user_lang(message.from_user.id)
        await message.answer(get_message("register", lang))
        await state.clear()
        await state.set_state(RegistrationStates.waiting_for_fio)
        await message.answer(get_message("registration_fio", lang))
        return
    await start_test_flow(message, state)

@router.message(F.text == "üß© –¢–µ—Å—Ç")
async def start_test_button(message: Message, state: FSMContext):
    await start_test(message, state)

import random

CREATIVE_TEXTS = [
    "‚ú® –¢—ã —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä! –ü—É—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...",
    "üöÄ –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –Ω–æ–≤–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ!",
    "üåü –û—Ç–ª–∏—á–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!",
    "üîÆ –¢–≤–æ–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±—É–¥—É—â–µ–µ!",
    "üî• –í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º!",
]

def genderize(text, gender):
    if not text:
        return ""
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ {gender:male|–º—É–∂|–∂–µ–Ω} –¥–ª—è –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ)
    def replacer(match):
        male, female = match.group(1), match.group(2)
        return female if gender == 'female' else male
    return re.sub(r'\{gender:male\|([^|]+)\|([^}]+)\}', replacer, text)

def get_scene_text(scene, scene_index=None, total_scenes=None, creative_prefix=None, gender='male'):
    title = genderize(scene.get('title', ''), gender)
    desc = genderize(scene.get('description', '') or scene.get('text', ''), gender)
    progress = ""
    if scene_index is not None and total_scenes is not None:
        bar_len = 8
        filled = int((scene_index+1) / total_scenes * bar_len)
        progress_bar = f"{'üü©'*filled}{'‚¨úÔ∏è'*(bar_len-filled)} {scene_index+1}/{total_scenes}"
        progress = f"<b>–í–æ–ø—Ä–æ—Å {scene_index+1} –∏–∑ {total_scenes}</b>\n{progress_bar}\n"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    options = scene.get('options', [])
    options_text = ""
    if options:
        options_text = "\n".join([
            f"<b>{i+1}.</b> {genderize(opt['text'], gender)}" for i, opt in enumerate(options)
        ])
    if title and desc:
        return f"{progress}<b>{title}</b>\n\n{desc}\n\n{options_text}"
    elif title:
        return f"{progress}<b>{title}</b>\n\n{options_text}"
    elif desc:
        return f"{progress}{desc}\n\n{options_text}"
    else:
        return f"{progress}–í–æ–ø—Ä–æ—Å\n\n{options_text}"

async def send_scene(message_or_callback, scene, scene_type='main', state=None, creative_prefix=None, only_option_id=None, extra_buttons=None):
    scene_index = None
    total_scenes = None
    gender = 'male'
    if state is not None:
        data = await state.get_data()
        all_scenes = data.get('all_scenes', [])
        for idx, s in enumerate(all_scenes):
            if s['id'] == scene['id']:
                scene_index = idx
                break
        total_scenes = len(all_scenes)
        gender = data.get('gender', 'male')
    text = get_scene_text(scene, scene_index, total_scenes, gender=gender)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{i+1}. {genderize(opt['text'], gender)}", callback_data=f"{scene_type}:{scene['id']}:{opt['id']}")]
            for i, opt in enumerate(scene.get('options', []))
                if not only_option_id or str(opt['id']) == str(only_option_id)
            ] + (extra_buttons if extra_buttons else [])
    )
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.regexp(r'^(main|personal):'))
async def handle_scene_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    all_scenes = data.get('all_scenes', [])
    scene_index = data.get('scene_index', 0)
    profile_scores = data.get('profile_scores', {})
    profession_scores = data.get('profession_scores', {})
    lang = data.get('lang', 'ru')
    gender = data.get('gender', 'male')
    scene_type, scene_id, option_id = callback.data.split(":", 2)
    scene_id = int(scene_id)
    scene = next((s for s in all_scenes if s['id'] == scene_id), None)
    if not scene:
        await callback.message.answer("–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    selected_option = next((opt for opt in scene.get('options', []) if str(opt['id']) == option_id), None)
    if not selected_option:
        await callback.message.answer("–û—à–∏–±–∫–∞: –æ–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º feedback —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ alert ---
    feedback_text = selected_option.get('feedback')
    def genderize(text):
        if gender == 'female':
            return text.replace('{gender:male|—Å—è|–∞—Å—å}', '–∞—Å—å').replace('{gender:male||–∞}', '–∞').replace('{gender:male||–Ω–∞}', '–Ω–∞')
        else:
            return text.replace('{gender:male|—Å—è|–∞—Å—å}', '—Å—è').replace('{gender:male||–∞}', '').replace('{gender:male||–Ω–∞}', '')
    feedback_text = genderize(feedback_text) if feedback_text else ''
    if feedback_text:
        await callback.answer(feedback_text, show_alert=True)
    
    # --- –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º (–ø–µ—Ä–≤—ã–µ 6 —Å—Ü–µ–Ω) ---
    if scene_type == 'main' and 'profile' in selected_option:
        profiles = selected_option['profile']
        if isinstance(profiles, list):
            for profile in profiles:
                name = profile.get('name') if isinstance(profile, dict) else profile
                profile_scores[name] = profile_scores.get(name, 0) + 1
        else:
            name = profiles.get('name') if isinstance(profiles, dict) else profiles
            profile_scores[name] = profile_scores.get(name, 0) + 1
    
    # --- –ü–æ—Å–ª–µ 6-–π —Å—Ü–µ–Ω—ã —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã ---
    if scene_type == 'main' and scene_index == 5:
        if profile_scores:
            top_profile = max(profile_scores.items(), key=lambda x: x[1])[0]
        else:
            top_profile = None
        PROFILE_TO_PROFILE_NAME = {
            '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
            '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
            '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è',
            '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–¥—ã–∫': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è',
            '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–∞—è': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–∞—è',
            '–¢–∞–±–∏–≥—ã–π-–∏–ª–∏–º–∏–π': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–∞—è',
            '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è': '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è',
            '–°–æ—Ü–∏–∞–ª–¥—ã–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫': '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è',
            '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è': '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è',
            '–ß—ã–≥–∞—Ä–º–∞—á—ã–ª-–∫”©—Ä–∫”©–º': '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è',
            '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è': '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è',
            '–ö–æ–ª–¥–æ–Ω–º–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫': '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è',
        }
        profile_name = PROFILE_TO_PROFILE_NAME.get(top_profile)
        sm = SceneManager(language=lang, gender=gender)
        personal_scenes = sm.get_personal_scenes_by_branch(profile_name)
        if not personal_scenes:
            await callback.message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
            return
        await state.update_data(
            all_scenes=personal_scenes,
            scene_index=0,
            branch=profile_name,
            profile_scores=profile_scores,
            profession_scores=profession_scores
        )
        await send_scene(callback, personal_scenes[0], scene_type='personal', state=state)
        return
    
    # --- –í –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ö —Å—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã –ø–æ –≤—Å–µ–º profiles (–ø–æ name) ---
    if scene_type == 'personal' and 'profiles' in selected_option:
        for prof in selected_option['profiles']:
            prof_name = prof.get('name')
            if prof_name:
                profession_scores[prof_name] = profession_scores.get(prof_name, 0) + prof.get('weight', 1)
    
    # --- –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    if scene_type == 'personal' and scene_index+1 >= len(all_scenes):
        await show_test_result(callback, state)
        return
    
    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω–µ ---
    await state.update_data(scene_index=scene_index+1, profile_scores=profile_scores, profession_scores=profession_scores)
    next_scene = all_scenes[scene_index+1]
    await send_scene(callback, next_scene, scene_type=scene_type, state=state)

async def show_test_result(message_or_callback, state: FSMContext, all_collected=False):
    data = await state.get_data()
    profile_scores = data.get('profile_scores', {})
    profession_scores = data.get('profession_scores', {})
    user_id = message_or_callback.from_user.id if hasattr(message_or_callback, 'from_user') else message_or_callback.message.from_user.id
    lang = data.get('lang', 'ru')
    API_USER = "http://localhost:8000/users/"
    
    # --- –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ---
    prof_keys = set(ARTIFACTS_BY_PROFESSION.keys())
    prof_scores = {k: v for k, v in profession_scores.items() if k in prof_keys}
    
    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø-1 –ø—Ä–æ—Ñ–µ—Å—Å–∏—é (–∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –∏–∑ —Ç–æ–ø–æ–≤—ã—Ö) ---
    top_profession = None
    if prof_scores:
        max_score = max(prof_scores.values())
        top_professions = [k for k, v in prof_scores.items() if v == max_score]
        top_profession = random.choice(top_professions)
    
    # --- –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —è–∑—ã–∫—É ---
    artifact = None
    if top_profession in ARTIFACTS_BY_PROFESSION:
        artifact = ARTIFACTS_BY_PROFESSION[top_profession].get(lang) or ARTIFACTS_BY_PROFESSION[top_profession].get('ru')
    
    # --- –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_USER}?telegram_id={user_id}") as resp:
                user = await resp.json() if resp.status == 200 else {}
    except Exception as e:
        user = {}
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API: {e}")
    
    user_artifacts = user.get('artifacts', []) if user else []
    
    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç ---
    artifact_key = artifact['name'] if artifact else None
    new_artifact = artifact_key and artifact_key not in user_artifacts
    
    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –µ—Å–ª–∏ –Ω–æ–≤—ã–π ---
    if artifact_key:
        try:
            if new_artifact:
                user_artifacts.append(artifact_key)
                user['artifacts'] = user_artifacts
                async with aiohttp.ClientSession() as session:
                    await session.post(API_USER, json=user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            db_data = db._read_db()
            user_data = db_data.get('users', {}).get(str(user_id), {})
            artifacts = set(user_data.get('artifacts', []))
            artifacts.add(artifact_key)
            user_data['artifacts'] = list(artifacts)
            db_data['users'][str(user_id)] = user_data
            db._write_db(db_data)
            
            if new_artifact:
                await message_or_callback.answer(f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: <b>{artifact_key}</b>!", parse_mode="HTML")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: {e}")
            await message_or_callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message_or_callback.answer("‚ùóÔ∏è –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É—Ç—å.")
    
    # --- –ö–†–ê–°–ò–í–û–ï –û–§–û–†–ú–õ–ï–ù–ò–ï ---
    lines = []
    lines.append(get_message("test_result_title", lang))
    lines.append("<b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>")
    
    if all_collected:
        lines.append(get_message("test_result_all_collected", lang))
    elif artifact:
        lines.append(get_message("test_result_artifact", lang) + f" <i>{artifact['name']}</i>\n{artifact['desc']}")
    else:
        lines.append(get_message("test_result_no_profession", lang))
    
    lines.append("<b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>")
    
    # --- –¢–æ–ø-3 –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ---
    if not profession_scores:
        lines.append(get_message("test_result_no_profession", lang))
    else:
        top_professions = sorted(profession_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        lines.append(get_message("test_result_top_professions", lang))
        for name, score in top_professions:
            lines.append(f"<b>{name}</b> ‚Äî <b>{score} {get_message('test_result_points', lang)}</b>")
    
    # --- –¢–æ–ø-3 –ø—Ä–æ—Ñ–∏–ª—è (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏) ---
    if profile_scores:
        top_profiles = sorted(profile_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        lines.append("\n" + get_message("test_result_top_profiles", lang))
        for name, score in top_profiles:
            lines.append(f"<b>{name}</b> ‚Äî <b>{score} {get_message('test_result_points', lang)}</b>")
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º top_profile –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        top_profile = top_profiles[0][0] if top_profiles else "-"
    else:
        top_profile = "-"
    
    lines.append("<b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>")
    text = "\n".join(lines)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=get_message("test_result_retry", lang), callback_data="restart_test")]
        ]
    )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    MAX_LEN = 4000
    if isinstance(message_or_callback, Message):
        for i in range(0, len(text), MAX_LEN):
            await message_or_callback.answer(text[i:i+MAX_LEN], reply_markup=keyboard if i == 0 else None, parse_mode="HTML")
    else:
        try:
            for i in range(0, len(text), MAX_LEN):
                await message_or_callback.message.edit_text(text[i:i+MAX_LEN], reply_markup=keyboard if i == 0 else None, parse_mode="HTML")
        except Exception as e:
            if "message is not modified" in str(e):
                pass  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
            else:
                raise
    
    await state.clear()

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ API (TestResult) ---
    try:
        API_TEST_RESULT = "http://localhost:8000/test_results/"
        test_result = {
            "telegram_id": user_id,
            "finished_at": datetime.now().isoformat(),
            "profile": top_profession or "-",
            "score": max_score if prof_scores else 0,
            "details": json.dumps({
                "profile_scores": profile_scores,
                "profession_scores": profession_scores,
                "artifact": artifact_key,
                "lang": lang
            }, ensure_ascii=False)
        }
        async with aiohttp.ClientSession() as session:
            await session.post(API_TEST_RESULT, json=test_result)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {e}")

@router.callback_query(F.data == "restart_test")
async def restart_test_callback(callback: CallbackQuery, state: FSMContext):
    await start_test(callback.message, state)

@router.callback_query(F.data == "to_start")
async def to_start_callback(callback: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
    await start_test_flow(callback.message, state)

@router.callback_query(F.data.regexp(r'^(personal):'))
async def handle_personal_scene_callback(callback: CallbackQuery, state: FSMContext):
    await handle_scene_callback(callback, state)

# --- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º ---
PROFESSION_TIPS = {
    '–ë–∏–æ–ª–æ–≥': '–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—Ä–æ–¥—É –∏ –Ω–µ –±–æ–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –º–∏—Ä–µ –≤–æ–∫—Ä—É–≥! –¢–≤–æ–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –±—É–¥—É—â–µ–µ.',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': '–†–∞–∑–≤–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏ –ª–æ–≥–∏–∫–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —Ç–≤–æ–∏ –∏–¥–µ–∏ —Å–ø–æ—Å–æ–±–Ω—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –º–∏—Ä—ã!',
    '–ò–Ω–∂–µ–Ω–µ—Ä': '–¢–≤–æ—è —Å—Ç—Ä–∞—Å—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏ —É–ª—É—á—à–µ–Ω–∏—é –≤–µ—â–µ–π ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è –Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–º!',
    '–§–∏–∑–∏–∫': '–¢–≤–æ–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è ‚Äî –∫–ª—é—á –∫ —Ä–∞–∑–≥–∞–¥–∫–µ —Ç–∞–π–Ω –í—Å–µ–ª–µ–Ω–Ω–æ–π. –ù–µ –±–æ–π—Å—è –æ—à–∏–±–∞—Ç—å—Å—è!',
    '–≠–∫–æ–ª–æ–≥': '–¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ –∏ –ª—É—á—à–µ. –ó–∞—â–∏—â–∞–π –ø—Ä–∏—Ä–æ–¥—É –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π –¥—Ä—É–≥–∏—Ö!',
    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫': '–¢–≤–æ–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –¥–≤–µ—Ä–∏ –≤ –ª—é–±—ã–µ —Å—Ñ–µ—Ä—ã. –ù–µ –±–æ–π—Å—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á!',
    '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∏—è': '–¢–≤–æ—è –∑–∞–±–æ—Ç–∞ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –º–∏—Ä –¥–æ–±—Ä–µ–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–º, –∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ!',
    '–ú–µ–¥–∏–∫': '–¢–≤–æ—è —ç–º–ø–∞—Ç–∏—è –∏ –∑–Ω–∞–Ω–∏—è —Å–ø–∞—Å–∞—é—Ç –∂–∏–∑–Ω–∏. –ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –∏ –æ —Å–µ–±–µ!',
    '–ì–µ–æ–≥—Ä–∞—Ñ': '–¢—ã –≤–∏–¥–∏—à—å –º–∏—Ä —à–∏—Ä–µ –¥—Ä—É–≥–∏—Ö. –ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π, –∏—Å—Å–ª–µ–¥—É–π –∏ –¥–µ–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏!',
    '–ì–µ–æ–ª–æ–≥': '–¢—ã —É–º–µ–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å —Ü–µ–Ω–Ω–æ–µ –¥–∞–∂–µ –≤ —Å–∞–º–æ–º –æ–±—ã—á–Ω–æ–º. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∫–æ–ø–∞—Ç—å –≥–ª—É–±–∂–µ!',
    '–§–∞—Ä–º–∞—Ü–µ–≤—Ç': '–¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è ‚Äî –∫–ª—é—á –∫ –∑–¥–æ—Ä–æ–≤—å—é –º–Ω–æ–≥–∏—Ö –ª—é–¥–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å!',
    # ... –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π ...
}

# 3. –ö–æ–ª–ª–µ–∫—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é)
@router.message(F.text == "üóùÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
async def show_artifact_collection(message: Message):
    from utils.database import db
    user_id = message.from_user.id
    db_data = db._read_db()
    user_data = db_data.get('users', {}).get(str(user_id), {})
    user_artifacts = set(user_data.get('artifacts', []))
    lang = await get_user_lang(user_id)
    
    # --- –°–ª–æ–≤–∞—Ä—å –≤–µ—Ç–æ–∫ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π ---
    branch_names = {
        'ru': {
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π',
            'natural_science': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω—ã–π',
            'humanitarian': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π',
            'social_economic': '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π',
            'creative_art': '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
            'applied_technology': '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π',
        },
        'kg': {
            'technical': '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫',
            'natural_science': '–ñ–∞—Ä–∞—Ç—ã–ª—ã—à —Ç–∞–∞–Ω—É—É',
            'humanitarian': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–¥—ã–∫',
            'social_economic': '–°–æ—Ü–∏–∞–ª–¥—ã–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫',
            'creative_art': '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ–ª—É–∫-”©–Ω”©—Ä',
            'applied_technology': '–ö–æ–ª–¥–æ–Ω–º–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫',
        }
    }[lang]
    
    # --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
    kb = InlineKeyboardBuilder()
    for branch, name in branch_names.items():
        kb.button(text=name, callback_data=f"artifact_branch:{branch}")
    kb.adjust(2)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:" if lang == 'ru' else "–ü—Ä–æ—Ñ–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.regexp(r'^artifact_branch:'))
async def show_artifacts_by_branch(callback: CallbackQuery):
    from utils.database import db
    user_id = callback.from_user.id
    db_data = db._read_db()
    user_data = db_data.get('users', {}).get(str(user_id), {})
    user_artifacts = set(user_data.get('artifacts', []))
    lang = await get_user_lang(user_id)
    branch = callback.data.split(':', 1)[1]
    
    branch_names = {
        'ru': {
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π',
            'natural_science': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω—ã–π',
            'humanitarian': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π',
            'social_economic': '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π',
            'creative_art': '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
            'applied_technology': '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π',
        },
        'kg': {
            'technical': '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫',
            'natural_science': '–ñ–∞—Ä–∞—Ç—ã–ª—ã—à —Ç–∞–∞–Ω—É—É',
            'humanitarian': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–¥—ã–∫',
            'social_economic': '–°–æ—Ü–∏–∞–ª–¥—ã–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫',
            'creative_art': '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ–ª—É–∫-”©–Ω”©—Ä',
            'applied_technology': '–ö–æ–ª–¥–æ–Ω–º–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫',
        }
    }[lang]
    
    # --- –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ branch –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 ---
    arts = [art for art in ARTIFACTS_BY_PROFESSION.values() if art.get('branch') == branch][:10]
    total = len(arts)
    collected = sum(1 for art in arts if art[lang]['name'] in user_artifacts)
    
    bar_len = 10
    filled = int(bar_len * collected / total) if total else 0
    progress_bar = f"{'üü©'*filled}{'‚¨úÔ∏è'*(bar_len-filled)} {collected}/{total}"
    
    lines = [f"<b>üóùÔ∏è {branch_names[branch]} –ø—Ä–æ—Ñ–∏–ª—å:</b>", progress_bar]
    
    all_collected = True
    for art in arts:
        art_name = art[lang]['name'] if lang in art else art['ru']['name']
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: emoji —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç –ø–æ –≤–µ—Ç–∫–µ
        emoji = art[lang].get('emoji') or art['ru'].get('emoji') or {
            'technical': '‚öôÔ∏è',
            'natural_science': 'üî¨',
            'humanitarian': 'üìú',
            'social_economic': 'üí∞',
            'creative_art': 'üé®',
            'applied_technology': 'üõ†Ô∏è',
        }.get(branch, 'üóùÔ∏è')
        desc = art[lang]['desc'] if lang in art else art['ru']['desc']
        
        if art_name in user_artifacts:
            lines.append(f"{emoji} <b>{art_name}</b> ‚Äî <i>–ø–æ–ª—É—á–µ–Ω!</i>\n{desc}")
        else:
            lines.append(f"{emoji} <b>{art_name}</b> ‚Äî <i>–µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω</i>")
            all_collected = False
    
    if all_collected and arts:
        lines.append("\nüéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Å–æ–±—Ä–∞–ª –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!</b>" if lang=='ru' else "\nüéâ <b>–ö—É—Ç—Ç—É–∫—Ç–∞–π–±—ã–∑! –ë—É–ª –ø—Ä–æ—Ñ–∏–ª–¥–∏–Ω –±–∞—Ä–¥—ã–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—Ç–∞—Ä—ã–Ω —á–æ–≥—É–ª—Ç—Ç—É“£!</b>")
    
    back_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–∏–ª—å" if lang == 'ru' else "–ë–∞—à–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="artifact_choose_profile")]]
    )
    
    await callback.message.edit_text("\n\n".join(lines), parse_mode="HTML", reply_markup=back_kb)
    await callback.answer()

@router.callback_query(F.data == "artifact_choose_profile")
async def artifact_choose_profile(callback: CallbackQuery):
    lang = await get_user_lang(callback.from_user.id)
    
    branch_names = {
        'ru': {
            'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π',
            'natural_science': '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω—ã–π',
            'humanitarian': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π',
            'social_economic': '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π',
            'creative_art': '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
            'applied_technology': '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π',
        },
        'kg': {
            'technical': '–¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫',
            'natural_science': '–ñ–∞—Ä–∞—Ç—ã–ª—ã—à —Ç–∞–∞–Ω—É—É',
            'humanitarian': '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–¥—ã–∫',
            'social_economic': '–°–æ—Ü–∏–∞–ª–¥—ã–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫',
            'creative_art': '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ–ª—É–∫-”©–Ω”©—Ä',
            'applied_technology': '–ö–æ–ª–¥–æ–Ω–º–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫',
        }
    }[lang]
    
    kb = InlineKeyboardBuilder()
    for branch, name in branch_names.items():
        kb.button(text=name, callback_data=f"artifact_branch:{branch}")
    kb.adjust(2)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:" if lang == 'ru' else "–ü—Ä–æ—Ñ–∏–ª–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

# --- –ü–æ—Ä—Ç–∞–ª—ã: –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è–º ---
@router.message(F.text.in_(["üóùÔ∏è –ü–æ—Ä—Ç–∞–ª—ã", "üóùÔ∏è –ü–æ—Ä—Ç–∞–ª–¥–∞—Ä"]))
async def show_portals(message: Message):
    from utils.database import db
    user_id = message.from_user.id
    db_data = db._read_db()
    user_data = db_data.get('users', {}).get(str(user_id), {})
    opened_profiles = user_data.get('opened_profiles', [])
    lang = await get_user_lang(user_id)
    if not opened_profiles:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤." if lang == 'ru' else "–°–∏–∑–¥–µ –∞–∑—ã—Ä—ã–Ω—á–∞ –∞—á—ã–∫ –ø–æ—Ä—Ç–∞–ª–¥–∞—Ä –∂–æ–∫.")
        return

    profile_names = {
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è': '‚öôÔ∏è –¢–µ—Ö–Ω–∏–∫–∞–ª—ã–∫',
        '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è': 'üìú –ì—É–º–∞–Ω–∏—Ç–∞—Ä–¥—ã–∫',
        '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω–∞—è': 'üî¨ –ñ–∞—Ä–∞—Ç—ã–ª—ã—à —Ç–∞–∞–Ω—É—É',
        '–°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è': 'üíº –°–æ—Ü–∏–∞–ª–¥—ã–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã–∫',
        '–¢–≤–æ—Ä—á–µ—Å–∫–æ-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è': 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ–ª—É–∫-”©–Ω”©—Ä',
        '–ü—Ä–∏–∫–ª–∞–¥–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è': 'üõ†Ô∏è –ö–æ–ª–¥–æ–Ω–º–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã–∫',
    }
    kb = InlineKeyboardBuilder()
    for prof in opened_profiles:
        text = profile_names.get(prof, prof)
        kb.button(text=text, callback_data=f"portal:{prof}")
    kb.adjust(2)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –ø–æ—Ä—Ç–∞–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:" if lang == 'ru' else "–ü–æ—Ä—Ç–∞–ª–¥—ã —Ç–∞–Ω–¥–∞“£—ã–∑:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.regexp(r'^portal:'))
async def start_personal_portal(callback: CallbackQuery, state: FSMContext):
    profile_name = callback.data.split(":", 1)[1]
    lang = await get_user_lang(callback.from_user.id)
    gender = 'male'  # –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∞ –∏–∑ user_data
    sm = SceneManager(language=lang, gender=gender)
    personal_scenes = sm.get_personal_scenes_by_branch(profile_name)
    if not personal_scenes:
        await callback.message.answer("–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è." if lang == 'ru' else "–ë—É–ª –ø—Ä–æ—Ñ–∏–ª “Ø—á“Ø–Ω –∂–µ–∫–µ —Å—Ü–µ–Ω–∞–ª–∞—Ä –∂–æ–∫.")
        return
    await state.clear()
    await state.update_data(
        all_scenes=personal_scenes,
        scene_index=0,
        branch=profile_name,
        profile_scores={},
        profession_scores={}
    )
    await send_scene(callback, personal_scenes[0], scene_type='personal', state=state)
    await callback.answer()

# --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ä—Ç–∞–ª–∞ –ø–æ—Å–ª–µ 6-–π —Å—Ü–µ–Ω—ã ---
# –ù–∞–π–¥–∏ —É—á–∞—Å—Ç–æ–∫, –≥–¥–µ –ø–æ—Å–ª–µ 6-–π —Å—Ü–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è profile_name –∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã:
# –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏: await state.update_data(...)
# –î–æ–±–∞–≤—å:
    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å ---
    from utils.database import db
    db_data = db._read_db()
    user_data = db_data.get('users', {}).get(str(callback.from_user.id), {})
    opened_profiles = set(user_data.get('opened_profiles', []))
    opened_profiles.add(profile_name)
    user_data['opened_profiles'] = list(opened_profiles)
    db_data['users'][str(callback.from_user.id)] = user_data
    db._write_db(db_data)

def register_handlers(dispatcher):
    dispatcher.include_router(router)