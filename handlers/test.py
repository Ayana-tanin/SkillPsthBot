from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from utils.states import TestStates, RegistrationStates
from utils.scene_manager import scene_manager, SceneManager
from aiogram.filters import Command
import aiohttp
from utils.messages import get_message, normalize_lang, get_user_lang
from handlers.test_utils import start_test_flow
import json
from datetime import datetime
import random
from collections import defaultdict
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import re
from config import settings

router = Router()

PROFILE_DESCRIPTIONS = {
    'Исследователь': {
        'ru': 'Тебя привлекает всё неизведанное, ты любишь искать новые подходы и открывать новые знания. Ты не боишься экспериментировать.',
        'ky': 'Сени белгисиз нерселер кызыктырат, сен жаңы ыкмаларды издеп, жаңы билимдерди ачканды жактырасың. Эксперименттен коркпойсуң.'
    },
    'Аналитик': {
        'ru': 'Ты любишь анализировать информацию, находить закономерности и решать сложные задачи. Тебе нравится работать с данными и делать логические выводы.',
        'ky': 'Маалыматтарды талдоону, мыйзам ченемдүүлүктөрдү табууну жана татаал маселелерди чечүүнү жактырасың. Маалымат менен иштеп, логикалык тыянактарды чыгаруу сага жагат.'
    },
    'Творец': {
        'ru': 'У тебя богатое воображение и нестандартное мышление. Ты умеешь видеть красоту и создавать что-то новое.',
        'ky': 'Сенин бай кыялың жана өзгөчө ой жүгүртүүң бар. Сен сулуулукту көрө билесиң жана жаңы нерселерди жарата аласың.'
    },
    'Технарь': {
        'ru': 'Ты увлекаешься технологиями, любишь разбираться в устройствах и создавать что-то своими руками.',
        'ky': 'Сен технологияларга кызыгасың, түзүлүштөрдүн ичин түшүнгөндү жана өз колуң менен бир нерсе жасаганды жактырасың.'
    },
    'Коммуникатор': {
        'ru': 'Ты легко находишь общий язык с людьми, умеешь слушать и доносить свои мысли.',
        'ky': 'Сен адамдар менен тил табышууда жеңил, угуп жана ойлоруңду жеткире билесиң.'
    },
    'Организатор': {
        'ru': 'Ты умеешь планировать, распределять задачи и вести команду к цели.',
        'ky': 'Сен пландаштырып, тапшырмаларды бөлүштүрүп, команданы максатка жеткире аласың.'
    },
    'Визуальный художник': {
        'ru': 'Ты видишь мир через призму цвета и формы, умеешь создавать визуальные образы.',
        'ky': 'Сен дүйнөнү түс жана форма аркылуу көрөсүң, визуалдык образдарды жарата аласың.'
    },
    'Цифровой художник': {
        'ru': 'Ты творишь в цифровой среде, создаёшь графику, анимацию или дизайн.',
        'ky': 'Сен санарип чөйрөдө жаратасың, графика, анимация же дизайн түзөсүң.'
    },
    'Писатель': {
        'ru': 'Ты умеешь выражать мысли через слова, создавать тексты и истории.',
        'ky': 'Сен ойлоруңду сөздөр аркылуу билдирип, тексттерди жана окуяларды жарата аласың.'
    },
    'Эколог': {
        'ru': 'Ты заботишься о природе и стремишься сделать мир чище и лучше.',
        'ky': 'Сен жаратылышты коргойсуң жана дүйнөнү тазараак жана жакшыраак кылууга умтуласың.'
    },
    'Ученый-естественник': {
        'ru': 'Ты любишь исследовать законы природы и проводить эксперименты.',
        'ky': 'Сен табият мыйзамдарын изилдеп, эксперименттерди жүргүзгөндү жактырасың.'
    },
    'Социолог': {
        'ru': 'Тебе интересно, как устроено общество и как люди взаимодействуют.',
        'ky': 'Сага коомдун түзүлүшү жана адамдардын өз ара мамилеси кызыктуу.'
    },
    'Историк': {
        'ru': 'Ты любишь изучать прошлое и находить закономерности в истории.',
        'ky': 'Сен өткөн мезгилди изилдеп, тарыхтагы мыйзам ченемдүүлүктөрдү табууну жактырасың.'
    },
    'Психолог': {
        'ru': 'Ты разбираешься в людях и их мотивах, умеешь слушать и поддерживать.',
        'ky': 'Сен адамдарды жана алардын мотивдерин түшүнөсүң, угуп жана колдой аласың.'
    },
    'Инженер-системотехник': {
        'ru': 'Ты проектируешь сложные системы и делаешь их эффективными.',
        'ky': 'Сен татаал системаларды долбоорлоп, аларды натыйжалуу кыласың.'
    },
    'Программист': {
        'ru': 'Ты создаёшь программы и цифровые решения для разных задач.',
        'ky': 'Сен ар түрдүү маселелер үчүн программаларды жана санарип чечимдерди түзөсүң.'
    },
    'Инженер данных': {
        'ru': 'Ты умеешь работать с большими объёмами информации и извлекать из них пользу.',
        'ky': 'Сен чоң көлөмдөгү маалымат менен иштеп, андан пайда чыгара аласың.'
    },
    'Робототехник': {
        'ru': 'Ты создаёшь умные машины и автоматизируешь процессы.',
        'ky': 'Сен акылдуу машиналарды түзүп, процесстерди автоматташтырасың.'
    },
    'Инженер-конструктор': {
        'ru': 'Ты придумываешь и собираешь новые устройства и механизмы.',
        'ky': 'Сен жаңы түзүлүштөрдү жана механизмдерди ойлоп табып, чогултасың.'
    },
    'Электронщик': {
        'ru': 'Ты разбираешься в электронике и любишь паять и собирать схемы.',
        'ky': 'Сен электрониканы түшүнөсүң жана схемаларды ширетип, чогултканды жактырасың.'
    },
    'Программист-интерфейсов': {
        'ru': 'Ты делаешь интерфейсы удобными и красивыми.',
        'ky': 'Сен интерфейстерди ыңгайлуу жана кооз кыласың.'
    },
    'Программист серверных систем': {
        'ru': 'Ты отвечаешь за логику и надёжность серверной части.',
        'ky': 'Сен сервер бөлүгүнүн логикасы жана ишенимдүүлүгү үчүн жооптуусуң.'
    },
    'Системный инженер': {
        'ru': 'Ты проектируешь архитектуру и инфраструктуру проектов.',
        'ky': 'Сен долбоорлордун архитектурасын жана инфраструктурасын долбоорлойсуң.'
    },
    'Организатор мероприятий': {
        'ru': 'Ты умеешь организовывать события и объединять людей.',
        'ky': 'Сен иш-чараларды уюштуруп, адамдарды бириктире аласың.'
    },
    'Фасилитатор': {
        'ru': 'Ты помогаешь команде работать эффективно и достигать целей.',
        'ky': 'Сен командага натыйжалуу иштеп, максаттарга жетүүгө жардам бересиң.'
    },
    'PR-специалист': {
        'ru': 'Ты умеешь доносить информацию до широкой аудитории.',
        'ky': 'Сен маалыматты кеңири аудиторияга жеткире аласың.'
    },
    'Маркетолог': {
        'ru': 'Ты анализируешь рынок и помогаешь продвигать продукты.',
        'ky': 'Сен базарды талдап, продуктуларды илгерилетүүгө жардам бересиң.'
    },
    'Аналитик данных': {
        'ru': 'Ты ищешь закономерности в данных и строишь прогнозы.',
        'ky': 'Сен маалыматтардагы мыйзам ченемдүүлүктөрдү таап, болжолдоолорду түзөсүң.'
    },
    'Системный аналитик': {
        'ru': 'Ты анализируешь процессы и предлагаешь оптимальные решения.',
        'ky': 'Сен процесстерди талдап, оптималдуу чечимдерди сунуштайсың.'
    },
    'Финансовый аналитик': {
        'ru': 'Ты разбираешься в финансах и умеешь считать деньги.',
        'ky': 'Сен финансыны түшүнүп, акчаны эсептей аласың.'
    },
    'Логик': {
        'ru': 'Ты любишь решать логические задачи и строить цепочки рассуждений.',
        'ky': 'Сен логикалык маселелерди чечип, ой жүгүртүү чынжырларын түзгөндү жактырасың.'
    },
    'Дизайнер пространства': {
        'ru': 'Ты создаёшь гармоничные и функциональные пространства.',
        'ky': 'Сен гармониялуу жана функционалдык мейкиндиктерди түзөсүң.'
    },
    'Исполнительский художник': {
        'ru': 'Ты выражаешь себя через музыку, театр или выступления.',
        'ky': 'Сен өзүңдү музыка, театр же чыгып сүйлөө аркылуу билдиресиң.'
    }
}

PROFILE_EMOJIS = {
    'Исследователь': '🧑‍🔬',
    'Техник': '🤖',
    'Гуманитарий': '📚',
    'Творец': '🎨',
    'Социально-экономический': '💼',
    'Прикладные технологии': '🔧',
}

PROFILE_JOBS = {
    'Исследователь': {
        'ru': ['Научный сотрудник', 'Лаборант', 'Data Scientist'],
        'ky': ['Илимий кызматкер', 'Лаборант', 'Маалымат илимпозу']
    },
    'Аналитик': {
        'ru': ['Бизнес-аналитик', 'Финансовый аналитик', 'Data Analyst'],
        'ky': ['Бизнес-аналитик', 'Финансы аналитиги', 'Маалымат аналитиги']
    },
    'Творец': {
        'ru': ['Дизайнер', 'Архитектор', 'Креативный директор'],
        'ky': ['Дизайнер', 'Архитектор', 'Чыгармачыл директор']
    },
    'Технарь': {
        'ru': ['Инженер', 'Разработчик', 'Техник'],
        'ky': ['Инженер', 'Иштеп чыгуучу', 'Техник']
    },
    'Коммуникатор': {
        'ru': ['PR-менеджер', 'Журналист', 'Учитель'],
        'ky': ['PR-менеджер', 'Журналист', 'Мугалим']
    },
    'Организатор': {
        'ru': ['Менеджер проектов', 'Администратор', 'Event-менеджер'],
        'ky': ['Долбоор менеджери', 'Администратор', 'Иш-чара уюштуруучу']
    },
    'Визуальный художник': {
        'ru': ['Художник', 'Иллюстратор', 'Декоратор'],
        'ky': ['Сүрөтчү', 'Иллюстратор', 'Декоратор']
    },
    'Цифровой художник': {
        'ru': ['Графический дизайнер', '3D-аниматор', 'UI/UX дизайнер'],
        'ky': ['Графикалык дизайнер', '3D-аниматор', 'UI/UX дизайнер']
    },
    'Писатель': {
        'ru': ['Копирайтер', 'Редактор', 'Сценарист'],
        'ky': ['Копирайтер', 'Редактор', 'Сценарист']
    },
    'Эколог': {
        'ru': ['Эколог', 'Специалист по устойчивому развитию'],
        'ky': ['Эколог', 'Туруктуу өнүгүү боюнча адис']
    },
    'Ученый-естественник': {
        'ru': ['Биолог', 'Физик', 'Химик'],
        'ky': ['Биолог', 'Физик', 'Химик']
    },
    'Социолог': {
        'ru': ['Социолог', 'Исследователь общественного мнения'],
        'ky': ['Социолог', 'Коомдук пикирди изилдөөчү']
    },
    'Историк': {
        'ru': ['Историк', 'Архивист'],
        'ky': ['Тарыхчы', 'Архивчи']
    },
    'Психолог': {
        'ru': ['Психолог', 'Консультант'],
        'ky': ['Психолог', 'Кеңешчи']
    },
    'Инженер-системотехник': {
        'ru': ['Системный инженер', 'Архитектор систем'],
        'ky': ['Система инженери', 'Системалар архитектору']
    },
    'Программист': {
        'ru': ['Разработчик ПО', 'Web-разработчик'],
        'ky': ['Программа иштеп чыгуучу', 'Веб-иштеп чыгуучу']
    },
    'Инженер данных': {
        'ru': ['Data Engineer', 'Аналитик данных'],
        'ky': ['Маалымат инженери', 'Маалымат аналитиги']
    },
    'Робототехник': {
        'ru': ['Инженер-робототехник', 'Мехатроник'],
        'ky': ['Робототехник инженер', 'Мехатроник']
    },
    'Инженер-конструктор': {
        'ru': ['Инженер-конструктор', 'Проектировщик'],
        'ky': ['Инженер-конструктор', 'Долбоорлоочу']
    },
    'Электронщик': {
        'ru': ['Инженер-электронщик', 'Схемотехник'],
        'ky': ['Электроника инженери', 'Схема техниги']
    },
    'Программист-интерфейсов': {
        'ru': ['Frontend-разработчик', 'UI-разработчик'],
        'ky': ['Frontend-иштеп чыгуучу', 'UI-иштеп чыгуучу']
    },
    'Программист серверных систем': {
        'ru': ['Backend-разработчик', 'DevOps-инженер'],
        'ky': ['Backend-иштеп чыгуучу', 'DevOps-инженер']
    },
    'Системный инженер': {
        'ru': ['Системный архитектор', 'DevOps-инженер'],
        'ky': ['Система архитектору', 'DevOps-инженер']
    },
    'Организатор мероприятий': {
        'ru': ['Event-менеджер', 'Координатор проектов'],
        'ky': ['Иш-чара уюштуруучу', 'Долбоор координатору']
    },
    'Фасилитатор': {
        'ru': ['Фасилитатор', 'Модератор'],
        'ky': ['Фасилитатор', 'Модератор']
    },
    'PR-специалист': {
        'ru': ['PR-менеджер', 'Специалист по коммуникациям'],
        'ky': ['PR-менеджер', 'Коммуникация боюнча адис']
    },
    'Маркетолог': {
        'ru': ['Маркетолог', 'Бренд-менеджер'],
        'ky': ['Маркетолог', 'Бренд-менеджер']
    },
    'Аналитик данных': {
        'ru': ['Data Analyst', 'BI-аналитик'],
        'ky': ['Маалымат аналитиги', 'BI-аналитик']
    },
    'Системный аналитик': {
        'ru': ['Системный аналитик', 'Бизнес-аналитик'],
        'ky': ['Система аналитиги', 'Бизнес-аналитик']
    },
    'Финансовый аналитик': {
        'ru': ['Финансовый аналитик', 'Экономист'],
        'ky': ['Финансы аналитиги', 'Экономист']
    },
    'Логик': {
        'ru': ['Математик', 'Разработчик алгоритмов'],
        'ky': ['Математик', 'Алгоритм иштеп чыгуучу']
    },
    'Дизайнер пространства': {
        'ru': ['Дизайнер интерьера', 'Архитектор'],
        'ky': ['Интерьер дизайнери', 'Архитектор']
    },
    'Исполнительский художник': {
        'ru': ['Актёр', 'Музыкант', 'Ведущий мероприятий'],
        'ky': ['Актёр', 'Музыкант', 'Иш-чара алып баруучу']
    }
}

RECOMMENDATION = {
    'ru': '✨ SkillPath рекомендует: Развивай свои сильные стороны и пробуй себя в разных направлениях. Мир профессий постоянно меняется, и твои уникальные качества могут быть востребованы в самых разных сферах!',
    'ky': '✨ SkillPath кеңеш берет: Күчтүү жактарыңды өнүктүр жана ар кандай багыттарда өзүңдү сына. Кесиптер дүйнөсү дайыма өзгөрөт, сенин уникалдуу сапаттарың ар түрдүү тармактарда керек болушу мүмкүн!'
}

# Удаляем хардкодированные URL
# API_URL = "http://localhost:8000/users/"
# API_PROGRESS_URL = "http://localhost:8000/test_progress/"

# === ПОЛНЫЙ СЛОВАРЬ АРТЕФАКТОВ ПО ПРОФЕССИЯМ ===
ARTIFACTS_BY_PROFESSION = {
    # Социально-экономическая
    'Экономика': {
        'ru': {'name': 'Весы Медного Изобилия', 'desc': 'Тотем в виде древних весов, на одной чаше — зерно, на другой — слиток золота. Это подношение символизирует равновесие между материальным достатком и справедливым распределением. Народ верит: тот, кто владеет весами, управляет процветанием.', 'emoji': '💰'},
        'ky': {'name': 'Жезден abundance таразасы', 'desc': 'Кылымдардан калган тараза: бир жагында дан, экинчи жагында алтын куймасы. Бул белек материалдык байлык менен адилет бөлүштүрүүнүн тең салмагын билдирет. Эл ишенет: таразаны кармаган — гүлдөп-өсүүнү башкарат.', 'emoji': '💰'},
        'branch': 'social_economic'
    },
    'Менеджмент': {
        'ru': {'name': 'Жезл Четырёх Колонн', 'desc': 'Ритуальный жезл с гравировкой четырёх стихий: Ресурсы, Время, Люди и Цель. Жезл вручается тем, кто умеет направить хаос к порядку, собрать разрозненные элементы в единое дело.', 'emoji': '🧠'},
        'ky': {'name': 'Төрт түркүктүн таягы', 'desc': 'Төрт стихиянын (Ресурстар, Убакыт, Адамдар, Максат) оюулары бар ритуалдык таяк. Бул таяк башаламандыкты тартипке келтирип, бөлүнгөндү бириктире алган адамга берилет.', 'emoji': '🧠'},
        'branch': 'social_economic'
    },
    'Психология': {
        'ru': {'name': 'Кристалл Внутреннего Зеркала', 'desc': 'Полупрозрачный артефакт, в котором каждый видит своё отражение — но не внешнее, а душевное.\nПодношение тем, кто умеет лечить сердца, не прикасаясь к телу, и слышать боль, которую не высказали.', 'emoji': '🔮'},
        'ky': {'name': 'Ички күзгү кристаллы', 'desc': 'Жарым тунук артефакт, анда ар ким өзүнүн ички жүзүн көрөт — сырткы эмес, жан дүйнөсүн. Бул белек жүрөктү кол тийгизбей айыктыра алган, айтылбаган кайгыны уга билгендерге арналган.', 'emoji': '🔮'},
        'branch': 'social_economic'
    },
    'Политология': {
        'ru': {'name': 'Перо Закона', 'desc': 'Символ древнего права: перо, написавшее первые слова о свободе и равенстве. Народ подносит его как знак доверия тому, кто создаёт структуры и идеи, формирующие цивилизацию.', 'emoji': '⚖️'},
        'ky': {'name': 'Мыйзамдын калеми', 'desc': 'Кылымдардан калган укуктун символу: эркиндик жана теңдик тууралуу алгачкы сөздөрдү жазган калем. Эл бул белекти коомду түзгөн идеялардын жана түзүмдөрдүн жаратуучусуна ишеним белгиси катары берет.', 'emoji': '⚖️'},
        'branch': 'social_economic'
    },
    'Социология': {
        'ru': {'name': 'Сеть Тысячи Голосов', 'desc': 'Ткань, сотканная из нитей, каждая из которых символизирует отдельную судьбу. Этот тотем вручают исследователям человеческих связей и создателям общества как организма.', 'emoji': '🕸️'},
        'ky': {'name': 'Миң үндүн тору', 'desc': 'Ар бир жип өзүнчө тагдырды билдирген кездеме. Бул тотем адамзат байланыштарын изилдеген жана коомду тирүү организм катары жараткан адамдарга берилет.', 'emoji': '🕸️'},
        'branch': 'social_economic'
    },
    'Бизнес-информатика': {
        'ru': {'name': 'Ядро Архитектора', 'desc': 'Светящийся куб, внутри которого движутся потоки данных, словно реки света. Это подношение мастерам цифровых миров, которые создают новые структуры мышления и процессов.', 'emoji': '💎'},
        'ky': {'name': 'Архитектордун өзөгү', 'desc': 'Ичинде жарык агымдары агып турган жаркыраган куб. Бул белек санарип дүйнөлөрдүн устаттарына — жаңы ой жүгүртүү жана процесстердин түзүмүн жараткан адамдарга арналган.', 'emoji': '💎'},
        'branch': 'social_economic'
    },
    'Маркетинг': {
        'ru': {'name': 'Факел Первоэволюция', 'desc': 'Огненный символ, зажигаемый при рождении идей.\nВручается тем, кто способен вдохновить массы, превратить желание в движение, а движение — в смысл.', 'emoji': '🔥'},
        'ky': {'name': 'Биринчи эволюциянын факели', 'desc': 'Идея жаралганда тутанган оттуу символ. Эл массаны шыктандырып, каалоону кыймылга, кыймылды — мааниге айланта алган адамга берет.', 'emoji': '🔥'},
        'branch': 'social_economic'
    },
    'Финансы и кредит': {
        'ru': {'name': 'Монета Вечного Обмена', 'desc': 'Одна сторона — хлеб, другая — рукопожатие.\nЭто знак доверия к тем, кто движет потоки богатства не ради накопления, а ради развития и поддержки.', 'emoji': '💰'},
        'ky': {'name': 'Түбөлүк алмашуунун тыйыны', 'desc': 'Бир жагы — нан, экинчи жагы — кол алышуу. Бул белек байлык агымын топтоо үчүн эмес, өнүгүү жана колдоо үчүн башкара алган адамдарга ишеним белгиси.', 'emoji': '💰'},
        'branch': 'social_economic'
    },
    'Государственное и муниципальное управление': {
        'ru': {'name': 'Ключ от Врат Города', 'desc': 'Огромный металлический ключ с резьбой в форме карт улиц.\nЕго подносят тем, кто открывает двери для справедливости, порядка и заботы в масштабах сообщества.', 'emoji': '🔑'},
        'ky': {'name': 'Шаардын дарбазасынын ачкычы', 'desc': 'Көчө карталарынын формасында оюулары бар чоң металл ачкыч. Бул ачкыч коомдук адилеттүүлүк, тартип жана камкордук үчүн эшик ачкан адамдарга берилет.', 'emoji': '🔑'},
        'branch': 'social_economic'
    },
    'Международные отношения': {
        'ru': {'name': 'Чаша Народов', 'desc': 'Кубок, составленный из частей десяти различных культур, инкрустированный фразами на разных языках.\nСимвол мира, доверия и искусства находить общее между непохожими.', 'emoji': '🌏'},
        'ky': {'name': 'Элдердин чөйчөгү', 'desc': 'Он ар башка мадаияттын бөлүктөрүнөн куралган, ар түрдүү тилдеги сөздөр менен кооздолгон чөйчөк. Бул — окшош эместердин ортосундагы биримдикти, ишенимди жана тынчтыкты билдирет.', 'emoji': '🌏'},
        'branch': 'social_economic'
    },
    # Естественно-научная
    'Биология': {
        'ru': {'name': 'Костяной гербарий', 'desc': 'Изогнутая коробка из слоновой кости мутанта, внутри которой — засушенные, но живые образцы флоры Зоны. Символ: Знание жизни среди смерти.', 'emoji': '🧬'},
        'ky': {'name': 'Сөөк гербарийи', 'desc': 'Мутант пилдин тиш сөөгүнөн жасалган ийилген кутуча, анын ичинде — кургатылган, бирок тирүү Зона өсүмдүктөрүнүн үлгүлөрү. Символ: Өлүм арасындагы өмүр билими.', 'emoji': '🧬'},
        'branch': 'natural_science'
    },
    'Химия': {
        'ru': {'name': 'Аурохим', 'desc': 'Фляжка из облучённого стекла, вечно наполненная голубым раствором. При встряхивании испускает фосфоресцирующий дым. Символ: Чистая формула среди хаоса вещества.', 'emoji': '🧪'},
        'ky': {'name': 'Аурохим', 'desc': 'Нурдантылган айнектен жасалган, дайыма көк эритме менен толтурулган идиш. Чайкаганда фосфордой жанган түтүн чыгарат. Символ: Заттардын баш аламандыгы арасындагы таза формула.', 'emoji': '🧪'},
        'branch': 'natural_science'
    },
    'Физика': {
        'ru': {'name': 'Резонатор Грома', 'desc': 'Портативная катушка с древними формулами, вырезанными на корпусе. Когда Зона вибрирует — он поёт. Символ: Управление силами, что рвут реальность.', 'emoji': '⚛️'},
        'ky': {'name': 'Күн күркүрөөсүнүн резонатору', 'desc': 'Корпусунда байыркы формулалар оюлган көчмө түрмөк. Зона дирилдегенде — ал ырдайт. Символ: Чындыкты айрыган күчтөрдү башкаруу.', 'emoji': '⚛️'},
        'branch': 'natural_science'
    },
    'Экология': {
        'ru': {'name': 'Корень Последнего Леса', 'desc': 'Узловатая древесная спираль, проросшая через сталь. Удерживает баланс даже в кислоте. Символ: Память природы, что отомстила и выжила.', 'emoji': '🌿'},
        'ky': {'name': 'Акыркы токойдун тамыры', 'desc': 'Болоттон өткөн бүдүр-түйдүк жыгач спираль. Кислотада да тең салмакта кала алат. Символ: Өч алып, аман калган табияттын эс тутуму.', 'emoji': '🌿'},
        'branch': 'natural_science'
    },
    'География': {
        'ru': {'name': 'Карта Живой Земли', 'desc': 'Кожа титана, вытравленная координатами, меняющимися при приближении к новым аномалиям. Символ: Путь через изменившийся мир.', 'emoji': '🗺️'},
        'ky': {'name': 'Жандуу Жердин картасы', 'desc': 'Жаңы аномалияларга жакындаганда өзгөрүлүп турган координаттар менен өрнөктөлгөн титандын териси. Символ: Өзгөргөн дүйнө аркылуу жол.', 'emoji': '🗺️'},
        'branch': 'natural_science'
    },
    'Геология': {
        'ru': {'name': 'Осколок Сердца Плиты', 'desc': 'Камень, найденный на глубине 12 км. Он пульсирует. Его нельзя нагреть, нельзя разбить. Символ: Вечность материи и глубины.', 'emoji': '🗿'},
        'ky': {'name': 'Плитанын жүрөгүнүн сыныгы', 'desc': '12 км тереңдикте табылган таш. Ал согуп турат. Аны ысытууга да, сындырууга да болбойт. Символ: Материянын жана тереңдиктин түбөлүктүүлүгү.', 'emoji': '🗿'},
        'branch': 'natural_science'
    },
    'Фармация': {
        'ru': {'name': 'Ампула Ковчега', 'desc': 'Последняя сыворотка до-катастрофной эпохи. Противоядие, лекарство, яд — никто точно не знает. Символ: Сила исцелять или уничтожать одним касанием.', 'emoji': '💊'},
        'ky': {'name': 'Кеменин ампуласы', 'desc': 'Кыйроодон мурунку доордун акыркы сывороткасы. Уу дары, дарылоо дарысы, уу — эч ким так билбейт. Символ: Бир эле тийүү менен дарылоо же жок кылуу күчү.', 'emoji': '💊'},
        'branch': 'natural_science'
    },
    'Медицина': {
        'ru': {'name': 'Шприц Возрождения', 'desc': 'Инструмент, выкованный из титанового ребра павшего гиганта. В его полости — сыворотка второй жизни. Символ: Возвращение надежды сквозь боль.', 'emoji': '🏥'},
        'ky': {'name': 'Кайра жаралуу шприци', 'desc': 'Курман болгон алптын титан кабыргасынан жасалган аспап. Анын ичинде — экинчи өмүрдүн сывороткасы. Символ: Оору аркылуу үмүттүн кайрылышы.', 'emoji': '🏥'},
        'branch': 'natural_science'
    },
    'Ветеринария': {
        'ru': {'name': 'Зуб Древнего', 'desc': 'Клык хищника до-человеческой эпохи. Привязывается к тому, кто спасает животных. Символ: Связь с дикой природой, даже у мутировавших.', 'emoji': '🐾'},
        'ky': {'name': 'Байыркынын тиши', 'desc': 'Адамзаттан мурунку доордогу жырткычтын азуу тиши. Жаныбарларды куткарган адамга байланып калат. Символ: Мутацияланган учурда да, жапайы табият менен байланыш.', 'emoji': '🐾'},
        'branch': 'natural_science'
    },
    'Математика (теоретическая)': {
        'ru': {'name': 'Куб Несходимости', 'desc': 'Геометрическая конструкция, нарушающая перспективу. Похоже, она существует в четырёх измерениях. Символ: Разум, способный видеть сквозь законы Вселенной.', 'emoji': '📐'},
        'ky': {'name': 'Кошулбастык кубу', 'desc': 'Перспективаны бузган геометриялык конструкция. Төрт өлчөмдө жашаган сыяктуу. Символ: Ааламдын мыйзамдарын тешип көрө алган акыл.', 'emoji': '📐'},
        'branch': 'natural_science'
    },
    # Техническая (инженерно-техническая)
    'Программная инженерия': {
        'ru': {'name': 'Чёрный кодекс Обнуления', 'desc': 'Книга в стальном переплёте, исписанная исцеляющими и разрушающими алгоритмами. При её открытии можно отключить любой враждебный ИИ.', 'emoji': '🖥️'},
        'ky': {'name': 'Нөлдөөнүн кара кодекси', 'desc': 'Болот мукабадагы, дарылоочу жана жок кылуучу алгоритмдер менен жазылган китеп. Аны ачканда кандай болбосун каршылашкан ЖИ өчүрүүгө болот.', 'emoji': '🖥️'},
        'branch': 'technical'
    },
    'Информатика и вычислительная техника': {
        'ru': {'name': 'Сердце ЦП — Кремниевый Разум', 'desc': 'Пульсирующий процессор, окружённый сетью кабелей, как нейронной сетью. Он способен хранить разум погибшего учёного.', 'emoji': '💻'},
        'ky': {'name': 'Борбордук процессордун жүрөгү — Кремний акылы', 'desc': 'Нейрондук тарам сыяктуу кабель торчолору менен курчалган согуп турган процессор. Ал курман болгон окумуштуунун акылын сактай алат.', 'emoji': '💻'},
        'branch': 'technical'
    },
    'Механика и машиностроение': {
        'ru': {'name': 'Ключ Гиганта', 'desc': 'Огромный, покрытый ржавчиной гаечный ключ, который может чинить любую машину... или стать оружием против стальных зверей пустоши.', 'emoji': '🔧'},
        'ky': {'name': 'Алптын ачкычы', 'desc': 'Дат баскан аябай чоң гайка ачкычы, ал каалаган машинаны оңдой алат... же ээн талаанын болот жаныбарларына каршы курал боло алат.', 'emoji': '🔧'},
        'branch': 'technical'
    },
    'Электроника и наноэлектроника': {
        'ru': {'name': 'Искровой Символ', 'desc': 'Микросхема, заключённая в стекло, испускает вспышки энергии. Может запустить мёртвые устройства... или вызвать бурю.', 'emoji': '⚡'},
        'ky': {'name': 'Учкун Символу', 'desc': 'Айнек ичине киргизилген, энергия жарчыктарын чыгарган микросхема. Өлгөн түзүлүштөрдү иштете алат... же бороон чакыра алат.', 'emoji': '⚡'},
        'branch': 'technical'
    },
    'Архитектура': {
        'ru': {'name': 'Метр Молчащих Башен', 'desc': 'Линейка из окаменевшего стекла, по легенде — из руин первой башни Нового Города. Позволяет построить неприступный форт.', 'emoji': '🏛️'},
        'ky': {'name': 'Үнсүз мунаралардын өлчөгүчү', 'desc': 'Ташка айланган айнектен жасалган сызгыч, легенда боюнча — Жаңы Шаардын биринчи мунарасынын урандысынан алынган. Өтүп болбос чепти куруу мүмкүнчүлүгүн берет.', 'emoji': '🏛️'},
        'branch': 'technical'
    },
    'Строительство': {
        'ru': {'name': 'Камень Основателя', 'desc': 'Грубый, трещнувший кирпич, взятый из первого убежища, что выдержало Очищающее Пламя. На его поверхности — чертёж спасения.', 'emoji': '🧱'},
        'ky': {'name': 'Негиз салуучунун ташы', 'desc': 'Тазалоочу Отко туруштук берген биринчи баш калкалоочу жайдан алынган одоно, жарака кеткен кирпич. Анын бетинде — куткарылуунун чиймеси.', 'emoji': '🧱'},
        'branch': 'technical'
    },
    'Системотехника': {
        'ru': {'name': 'Консоль Единого Контроля', 'desc': 'Устройство на запястье, которое соединяется со всеми работающими машинами. Может заставить системы снова работать в унисон.', 'emoji': '🖥️'},
        'ky': {'name': 'Бирдиктүү башкаруу консолу', 'desc': 'Бардык иштеп жаткан машиналарга кошулуп турган билек түзүлүшү. Системаларды кайрадан бирдикте иштетүүгө мүмкүнчүлүк берет.', 'emoji': '🖥️'},
        'branch': 'technical'
    },
    'Автоматизация и управление': {
        'ru': {'name': 'Пульт Протокола Р', 'desc': 'Потёртый блок управления с одной красной кнопкой. Может подчинить себе любую автономную систему.', 'emoji': '🤖'},
        'ky': {'name': 'Р протоколунун пульту', 'desc': 'Бир кызыл баскычы бар эскирген башкаруу блогу. Каалаган автономдуу системаны өзүнө баш ийдире алат.', 'emoji': '🤖'},
        'branch': 'technical'
    },
    'Робототехника': {
        'ru': {'name': 'Око Меха', 'desc': 'Одинокий оптический сенсор, извлечённый из павшего робота-защитника. Его свет мерцает, когда рядом угроза... или спасение.', 'emoji': '🦾'},
        'ky': {'name': 'Механизм көзү', 'desc': 'Курман болгон робот-коргоочудан алынган жалгыз оптикалык сенсор. Жакын жерде коркунуч... же куткарылуу болгондо анын жарыгы жымыңдайт.', 'emoji': '🦾'},
        'branch': 'technical'
    },
    'Авиа- и ракетостроение': {
        'ru': {'name': 'Оперение Последнего Полёта', 'desc': 'Обломок стабилизатора с последнего челнока, что покинул Землю. Несёт гравировку: "Только небо — наш предел".', 'emoji': '🚀'},
        'ky': {'name': 'Акыркы учуунун куйругу', 'desc': 'Жерди таштап кеткен акыркы космос кемесинин стабилизаторунун сыныгы. Анда: "Бир гана асман — биздин чегибиз" деп оюлган.', 'emoji': '🚀'},
        'branch': 'technical'
    },
    # Гуманитарная
    'Филология (языки и литература)': {
        'ru': {'name': 'Перворечь — Перо Века', 'desc': 'Перо, впитавшее кровь слов и дыхание поэзии.', 'emoji': '✨'},
        'ky': {'name': 'Алгачкы сөз — Кылымдын калеми', 'desc': 'Сөздөрдүн канын жана поэзиянын деминин сиңирген калем.', 'emoji': '✨'},
        'branch': 'humanitarian'
    },
    'История': {
        'ru': {'name': 'Хроносфера — Часы Разлома', 'desc': 'Часы, хранящие пыль империй и треск падений.', 'emoji': '⏳'},
        'ky': {'name': 'Хроносфера — Жарака саат', 'desc': 'Империялардын чаңын жана кулоолордун шарпасын сактаган саат.', 'emoji': '⏳'},
        'branch': 'humanitarian'
    },
    'Правоведение': {
        'ru': {'name': 'Клинок Справедливости — Весы Слепой Истины', 'desc': 'Весы, отсекающие ложь от закона.', 'emoji': '⚖️'},
        'ky': {'name': 'Адилеттүүлүк кылычы — Сокур чындыктын таразасы', 'desc': 'Жалганды мыйзамдан ажыраткан тараза.', 'emoji': '⚖️'},
        'branch': 'humanitarian'
    },
    'Журналистика': {
        'ru': {'name': 'Око Перекрестков — Перо-Микрофон', 'desc': 'Перо-микрофон, слышащее шум толпы и шёпот истины.', 'emoji': '📢'},
        'ky': {'name': 'Кайчылаш жолдордун көзү — Калем-микрофон', 'desc': 'Элдин дуу-дуусун жана чындыктын шыбырын уккан калем-микрофон.', 'emoji': '📢'},
        'branch': 'humanitarian'
    },
    'Философия': {
        'ru': {'name': 'Логос-Сфера — Куб Парадоксов', 'desc': 'Куб, вращающийся в бездне мышления.', 'emoji': '🌀'},
        'ky': {'name': 'Логос-Сфера — Парадокстор кубу', 'desc': 'Ой жүгүртүүнүн туңгуюгунда айланган куб.', 'emoji': '🌀'},
        'branch': 'humanitarian'
    },
    'Культурология': {
        'ru': {'name': 'Лик Мира — Маска Тысячи Ликов', 'desc': 'Маска, отражающая хаос смыслов.', 'emoji': '🎭'},
        'ky': {'name': 'Дүйнөнүн өңү — Миң өңдүн маскасы', 'desc': 'Маанилердин башаламандыгын чагылдырган маска.', 'emoji': '🎭'},
        'branch': 'humanitarian'
    },
    'Перевод и переводоведение': {
        'ru': {'name': 'Зеркало Эха — Камень Многоголосия', 'desc': 'Камень, повторяющий одно в тысяче языков.', 'emoji': '🗣️'},
        'ky': {'name': 'Жаңырык күзгүсү — Көп үндүүлүк ташы', 'desc': 'Бирди миң тилде кайталаган таш.', 'emoji': '🗣️'},
        'branch': 'humanitarian'
    },
    'Лингвистика': {
        'ru': {'name': 'Корень Глагола — Древо Языков', 'desc': 'Древо, чьи ветви шепчут на всех наречиях Земли.', 'emoji': '🔤'},
        'ky': {'name': 'Этиштин тамыры — Тилдердин дарагы', 'desc': 'Бутактары Жердин бардык тилдеринде шыбыраган дарак.', 'emoji': '🔤'},
        'branch': 'humanitarian'
    },
    'Теология': {
        'ru': {'name': 'Искра Завета — Перо Огня', 'desc': 'Перо, несущее свет немеркнущей веры.', 'emoji': '🕯️'},
        'ky': {'name': 'Осуят учкуну — От калеми', 'desc': 'Өчпөс ишенимдин жарыгын алып жүргөн калем.', 'emoji': '🕯️'},
        'branch': 'humanitarian'
    },
    'Социальная работа': {
        'ru': {'name': 'Сердце Путеводное — Компас Милосердия', 'desc': 'Компас, не ведающий ни севера, ни границ.', 'emoji': '💝'},
        'ky': {'name': 'Жол көрсөтүүчү жүрөк — Боорукердик компасы', 'desc': 'Түндүктү да, чек араны да билбеген компас.', 'emoji': '💝'},
        'branch': 'humanitarian'
    },
    # Прикладно-технологическая
    'Слесарное дело': {
        'ru': {'name': 'Ключ Вечного Зазора', 'desc': 'Легендарный гаечный ключ, вручённый мастеру, чьи руки «закрутили» мост через бурную реку. Символ точности, усилия и крепости узлов.', 'emoji': '🔧'},
        'ky': {'name': 'Түбөлүк аралыктын ачкычы', 'desc': 'Колдору шар дарыянын үстүнөн көпүрөнү "бураган" устага берилген легендарлуу ачкыч. Тактыктын, күчтүн жана түйүндөрдүн бекемдигинин символу.', 'emoji': '🔧'},
        'branch': 'applied_technology'
    },
    'Электромонтаж': {
        'ru': {'name': 'Искра Первородной Сети', 'desc': 'Осколок первого кабеля, от которого загорелись уличные фонари. Символ энергии, света и управления скрытыми силами.', 'emoji': '⚡'},
        'ky': {'name': 'Алгачкы тармактын учкуну', 'desc': 'Көчө чырактары күйгөн биринчи кабелдин сыныгы. Энергиянын, жарыктын жана жашыруун күчтөрдү башкаруунун символу.', 'emoji': '⚡'},
        'branch': 'applied_technology'
    },
    'Автомеханика': {
        'ru': {'name': 'Коленвал Мира', 'desc': 'Часть двигателя, запустившего первую машину великого кочевника. Символ движения, надёжности и ритма железного сердца.', 'emoji': '🚗'},
        'ky': {'name': 'Дүйнөнүн кривошиби', 'desc': 'Улуу көчмөндүн биринчи машинасын иштеткен кыймылдаткычтын бөлүгү. Кыймылдын, ишенимдүүлүктүн жана темир жүрөктүн ритминин символу.', 'emoji': '🚗'},
        'branch': 'applied_technology'
    },
    'Сварочные технологии': {
        'ru': {'name': 'Пламя Скрепляющего Братства', 'desc': 'Ритуальный сварочный шов, оставшийся на главной балке легендарного купола. Символ объединения, прочности и бесстрашия.', 'emoji': '🔥'},
        'ky': {'name': 'Бириктирген бир туугандыктын жалыны', 'desc': 'Легендарлуу күмбөздүн негизги устунунда калган ритуалдык ширетүү тигиши. Биримдиктин, бекемдиктин жана коркпостуктун символу.', 'emoji': '🔥'},
        'branch': 'applied_technology'
    },
    'Токарное и фрезерное дело': {
        'ru': {'name': 'Ось Вечной Точности', 'desc': 'Сверло, выточенное вручную до абсолютной симметрии. Символ геометрии, сосредоточенности и бесконечного вращения.', 'emoji': '⚙️'},
        'ky': {'name': 'Түбөлүк тактыктын огу', 'desc': 'Толук симметрияга чейин колго чегилген бургулоочу. Геометриянын, көңүл буруунун жана түбөлүк айлануунун символу.', 'emoji': '⚙️'},
        'branch': 'applied_technology'
    },
    'Поварское дело': {
        'ru': {'name': 'Черпак Девяти Столов', 'desc': 'Деревянный половник, которым подали еду в день перемирия. Символ заботы, душевного тепла и великого вкуса.', 'emoji': '🍴'},
        'ky': {'name': 'Тогуз дасторкондун сузгучу', 'desc': 'Тынчтык келишимин түзгөн күнү тамак берген жыгач чөмүч. Камкордуктун, жылуулуктун жана даамдуулуктун символу.', 'emoji': '🍴'},
        'branch': 'applied_technology'
    },
    'Техническое обслуживание транспорта': {
        'ru': {'name': 'Ремень Перехода Пути', 'desc': 'Фрагмент транспортного ремня, спасшего колонну в бурю. Символ надёжности, скрытой работы и бдительности.', 'emoji': '🔩'},
        'ky': {'name': 'Жол өтүүнүн курчана', 'desc': 'Бороондо колоннаны сактап калган транспорт курчанынын бөлүгү. Ишенимдүүлүктүн, жашыруун иштин жана сак болуунун символу.', 'emoji': '🔩'},
        'branch': 'applied_technology'
    },
    'Столярное дело': {
        'ru': {'name': 'Рубанок Мудрого Строителя', 'desc': 'Инструмент, которым выровняли доски для дома вечной зимы. Символ уюта, ручного труда и упрямого дерева.', 'emoji': '🪵'},
        'ky': {'name': 'Акылман курулушчунун сүргүчү', 'desc': 'Түбөлүк кыш үйү үчүн тактайларды түздөгөн курал. Жылуулуктун, кол эмгегинин жана кежир жыгачтын символу.', 'emoji': '🪵'},
        'branch': 'applied_technology'
    },
    'Обслуживание зданий и сооружений': {
        'ru': {'name': 'Уровень Основателя', 'desc': 'Бронзовый строительный уровень, которым выровняли основание ратуши. Символ устойчивости, контроля и скрытой архитектуры.', 'emoji': '🏗️'},
        'ky': {'name': 'Негиз салуучунун деңгээли', 'desc': 'Ратушанын негизин түздөгөн коло курулуш деңгээли. Туруктуулуктун, контролдун жана жашыруун архитектуранын символу.', 'emoji': '🏗️'},
        'branch': 'applied_technology'
    },
    'Машинист подъемных машин': {
        'ru': {'name': 'Штурвал Стального Великана', 'desc': 'Руль первого подъёмного крана, поднявшего колокол собора. Символ мощи, высоты и точного управления тяжестью.', 'emoji': '🏗️'},
        'ky': {'name': 'Болот алптын штурвалы', 'desc': 'Чиркөөнүн коңгуроосун көтөргөн биринчи көтөргүч крандын рулу. Кубаттуулуктун, бийиктиктин жана оордукту так башкаруунун символу.', 'emoji': '🏗️'},
        'branch': 'applied_technology'
    },
    # Творческо-художественная
    'Дизайн (графический, промышленный, одежды)': {
        'ru': {'name': 'Кристалл Композиции', 'desc': 'Грани этого кристалла отражают идеальные пропорции, цветовые гармонии и силу формы. Он меняет цвет под взглядом дизайнера.', 'emoji': '🎨'},
        'ky': {'name': 'Композиция кристаллы', 'desc': 'Бул кристаллдын кырлары идеалдуу пропорцияларды, түстүк гармонияларды жана форманын күчүн чагылдырат. Ал дизайнердин көз карашы астында түсүн өзгөртөт.', 'emoji': '🎨'},
        'branch': 'creative_art'
    },
    'Изобразительное искусство': {
        'ru': {'name': 'Первая Кисть Сотворения', 'desc': 'Из дерева мифического леса вырезана кисть, которой, по легенде, был нарисован первый рассвет. Отдаёт тепло, когда рядом — чистый холст.', 'emoji': '🖼️'},
        'ky': {'name': 'Жаратылыштын биринчи кыл калеми', 'desc': 'Мифтик токойдун жыгачынан чегилген кыл калем, легенда боюнча, биринчи таң менен тартылган. Жанында таза кендир болгондо жылуулук берет.', 'emoji': '🖼️'},
        'branch': 'creative_art'
    },
    'Музыка и музыкальное искусство': {
        'ru': {'name': 'Золотой Камертон Гармонии', 'desc': 'Когда им ударяют по воздуху — реальность затихает. Этот камертон не строит звук — он пробуждает души.', 'emoji': '🎵'},
        'ky': {'name': 'Гармониянын алтын камертону', 'desc': 'Аны аба менен ургулаганда — чындык тынчтанат. Бул камертон үндү түзбөйт — ал жандарды ойготот.', 'emoji': '🎵'},
        'branch': 'creative_art'
    },
    'Архитектура и урбанистика': {
        'ru': {'name': 'Камень Основателя', 'desc': 'Из чистого мрамора, будто срезанный блок древнего храма. На его гранях — чертёж идеального города.', 'emoji': '🏛️'},
        'ky': {'name': 'Негиз салуучунун ташы', 'desc': 'Таза мрамордон, байыркы храмдын кесилген блогу сыяктуу. Анын кырларында — идеалдуу шаардын чиймеси.', 'emoji': '🏛️'},
        'branch': 'creative_art'
    },
    'Актёрское мастерство': {
        'ru': {'name': 'Маска Чистой Эмоции', 'desc': 'Половина маски бела, половина — чёрна, но её выражение меняется в зависимости от рук, что держат её.', 'emoji': '🎭'},
        'ky': {'name': 'Таза эмоциянын маскасы', 'desc': 'Масканын жарымы ак, жарымы — кара, бирок анын көрүнүшү кармаган колдорго жараша өзгөрүп турат.', 'emoji': '🎭'},
        'branch': 'creative_art'
    },
    'Режиссура': {
        'ru': {'name': 'Око Великой Сцены', 'desc': 'Линза в оправе, похожей на театральный прожектор, в центре которой — вечный круговорот света и тени.', 'emoji': '🎬'},
        'ky': {'name': 'Улуу сахнанын көзү', 'desc': 'Театрдын прожекторуна окшош алкактагы линза, анын борборунда — жарык менен көлөкөнүн түбөлүк айлануусу.', 'emoji': '🎬'},
        'branch': 'creative_art'
    },
    'Фотография': {
        'ru': {'name': 'Объектив Времени', 'desc': 'Легендарный объектив, внутри которого вращаются образы прошедших эпох. Он показывает не то, что есть — а то, что осталось.', 'emoji': '📷'},
        'ky': {'name': 'Убакыттын объективи', 'desc': 'Ичинде өткөн доорлордун образдары айланган легендарлуу объектив. Ал бар нерсени көрсөтпөйт — калган нерсени көрсөтөт.', 'emoji': '📷'},
        'branch': 'creative_art'
    },
    'Хореография': {
        'ru': {'name': 'Сандалии Ветра', 'desc': 'Танцевальная обувь, сплетённая из шёлка и мифической травы. Лёгкие как дыхание, они дарят чувство движения даже в покое.', 'emoji': '💃'},
        'ky': {'name': 'Шамалдын бут кийими', 'desc': 'Жибек менен мифтик чөптөн токулган бий бут кийими. Дем сыяктуу жеңил, алар тынч абалда дагы кыймыл сезимин тартуулайт.', 'emoji': '💃'},
        'branch': 'creative_art'
    },
    'Мода и текстиль': {
        'ru': {'name': 'Нить Преображения', 'desc': 'Бесконечная серебряная нить, из которой были сотканы первые образцы стиля. Может переписать судьбу человека, если вплести её в ткань.', 'emoji': '🧵'},
        'ky': {'name': 'Өзгөрүү жиби', 'desc': 'Биринчи стиль үлгүлөрү токулган түбөлүк күмүш жип. Эгер аны кездемеге токуса, адамдын тагдырын өзгөртө алат.', 'emoji': '🧵'},
        'branch': 'creative_art'
    },
    'Арт-менеджмент': {
        'ru': {'name': 'Скипетр Вдохновения', 'desc': 'Посох, инкрустированный символами искусств: кисть, маска, камертон. Его держит тот, кто направляет художников, не вмешиваясь в их пороки.', 'emoji': '🎨'},
        'ky': {'name': 'Шыктандыруу скипетри', 'desc': 'Искусство символдору менен кооздолгон таяк: кыл калем, маска, камертон. Аны сүрөтчүлөрдүн кемчиликтерине кийлигишпей, аларды жетектеген адам кармайт.', 'emoji': '🎨'},
        'branch': 'creative_art'
    },
}

PROFESSION_TIPS = {
    'Биолог': {
        'ru': 'Продолжай исследовать природу и не бойся задавать вопросы о мире вокруг! Твои открытия могут изменить будущее.',
        'ky': 'Табиятты изилдөөнү улант жана айлана-чөйрө жөнүндө суроолордон коркпо! Сенин ачылыштарың келечекти өзгөртө алат.'
    },
    'Программист': {
        'ru': 'Развивай навыки логики и креативности — твои идеи способны создавать новые цифровые миры!',
        'ky': 'Логика жана чыгармачылык көндүмдөрүңдү өнүктүр — сенин идеяларың жаңы санарип дүйнөлөрдү жарата алат!'
    },
    'Инженер': {
        'ru': 'Твоя страсть к созданию и улучшению вещей — твой главный инструмент. Не останавливайся на достигнутом!',
        'ky': 'Нерселерди жаратуу жана жакшыртууга болгон кумарың — сенин негизги куралың. Жетишкендиктериңе токтобо!'
    },
    'Физик': {
        'ru': 'Твои эксперименты и наблюдения — ключ к разгадке тайн Вселенной. Не бойся ошибаться!',
        'ky': 'Сенин эксперименттериң жана байкоолоруң — Ааламдын сырларын чечүүнүн ачкычы. Жаңылуудан коркпо!'
    },
    'Эколог': {
        'ru': 'Ты можешь сделать мир чище и лучше. Защищай природу и вдохновляй других!',
        'ky': 'Сен дүйнөнү тазараак жана жакшыраак кыла аласың. Табиятты корго жана башкаларды шыктандыр!'
    },
    'Математик': {
        'ru': 'Твои аналитические способности открывают двери в любые сферы. Не бойся сложных задач!',
        'ky': 'Сенин аналитикалык жөндөмдөрүң каалаган тармакка эшик ачат. Татаал маселелерден коркпо!'
    },
    'Ветеринария': {
        'ru': 'Твоя забота о животных делает этот мир добрее. Продолжай помогать тем, кто не может сказать спасибо!',
        'ky': 'Жаныбарларга болгон камкордугуң бул дүйнөнү мээримдүүрөөк кылат. Ыраазычылык айта албагандарга жардам берүүнү улант!'
    },
    'Медик': {
        'ru': 'Твоя эмпатия и знания спасают жизни. Не забывай заботиться и о себе!',
        'ky': 'Сенин эмпатияң жана билимиң өмүрлөрдү сактайт. Өзүңө да кам көрүүнү унутпа!'
    },
    'Географ': {
        'ru': 'Ты видишь мир шире других. Путешествуй, исследуй и делись открытиями!',
        'ky': 'Сен дүйнөнү башкалардан кеңири көрөсүң. Саякаттап, изилдеп, ачылыштарың менен бөлүш!'
    },
    'Геолог': {
        'ru': 'Ты умеешь находить ценное даже в самом обычном. Продолжай копать глубже!',
        'ky': 'Сен кадимки нерселерден да баалуу нерселерди таба аласың. Тереңирээк казууну улант!'
    },
    'Фармацевт': {
        'ru': 'Твои знания — ключ к здоровью многих людей. Продолжай учиться и помогать!',
        'ky': 'Сенин билимиң — көп адамдардын ден соолугунун ачкычы. Окуп, жардам берүүнү улант!'
    },
    'Химик': {
        'ru': 'Твоя способность понимать вещества на глубинном уровне открывает путь к новым материалам и решениям.',
        'ky': 'Заттарды терең деңгээлде түшүнүү жөндөмүң жаңы материалдарга жана чечимдерге жол ачат.'
    },
    'Филолог': {
        'ru': 'Слова — твой инструмент, и ты владеешь им мастерски. Продолжай исследовать глубины языка и литературы!',
        'ky': 'Сөздөр — сенин куралың, жана сен аны чеберчилик менен колдоносуң. Тил жана адабияттын тереңдиктерин изилдөөнү улант!'
    },
    'Историк': {
        'ru': 'Ты хранитель памяти человечества. Прошлое в твоих руках оживает и учит нас.',
        'ky': 'Сен адамзаттын эс тутумунун сакчысысың. Өткөн мезгил сенин колуңда жанданып, бизге сабак берет.'
    },
    'Дизайнер': {
        'ru': 'Твой взгляд преображает обычные вещи в произведения искусства. Продолжай видеть красоту во всем!',
        'ky': 'Сенин көз карашың кадимки нерселерди искусство чыгармаларына айландырат. Бардык нерседен сулуулукту көрүүнү улант!'
    },
    'Архитектор': {
        'ru': 'Ты создаешь не просто здания, а пространства, в которых живут истории. Мечтай и воплощай!',
        'ky': 'Сен жөн гана имараттарды эмес, окуялар жашаган мейкиндиктерди түзөсүң. Кыялдан жана ишке ашыр!'
    },
    'Музыкант': {
        'ru': 'Твои ноты касаются самых глубоких струн души. Продолжай наполнять мир гармонией!',
        'ky': 'Сенин ноталарың жандын эң терең кылдарына тиет. Дүйнөнү гармония менен толтурууну улант!'
    },
    'Психолог': {
        'ru': 'Ты умеешь видеть личность за масками и помогаешь людям понять себя. Береги и свое душевное равновесие!',
        'ky': 'Сен маскалардын артындагы инсанды көрө билесиң жана адамдарга өздөрүн түшүнүүгө жардам бересиң. Өз жан дүйнөңдүн тең салмактуулугун да сакта!'
    },
    'Социолог': {
        'ru': 'Ты видишь невидимые связи, образующие общество. Твои исследования помогают создавать лучший мир.',
        'ky': 'Сен коомду түзгөн көрүнбөгөн байланыштарды көрөсүң. Сенин изилдөөлөрүң жакшы дүйнө түзүүгө жардам берет.'
    },
    'Экономист': {
        'ru': 'Ты понимаешь, как работают сложные системы обмена и создания ценностей. Используй это знание во благо!',
        'ky': 'Сен татаал алмашуу жана баалуулуктарды түзүү системалары кандай иштээрин түшүнөсүң. Бул билимди жакшылык үчүн колдон!'
    }
}

# --- Словарь соответствия кыргызских и русских профилей ---
KY_TO_RU_PROFILE = {
    'Техникалык': 'Техническая',
    'Гуманитардык': 'Гуманитарная',
    'Жаратылыш таануу': 'Естественно-научная',
    'Социалдык-экономикалык': 'Социально-экономическая',
    'Чыгармачыл-көркөм': 'Творческо-художественная',
    'Колдонмо-технологиялык': 'Прикладно-технологическая',
}

# --- Словарь переводов профилей для локализации ---
PROFILE_TRANSLATIONS = {
    "ru": {},
    "ky": {
        "Техническая": "Техникалык",
        "Гуманитарная": "Гуманитардык",
        "Естественно-научная": "Жаратылыш таануу",
        "Социально-экономическая": "Социалдык-экономикалык",
        "Творческо-художественная": "Чыгармачыл-көркөм",
        "Прикладно-технологическая": "Колдонмо-технологиялык",
    }
}

async def get_user_data_from_api(telegram_id: int):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{settings.API_URL}/users/?telegram_id={telegram_id}") as resp:
            if resp.status == 200:
                return await resp.json()
            return None

async def load_test_progress(telegram_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{settings.API_URL}/test_progress/?telegram_id={telegram_id}") as resp:
            if resp.status == 200:
                data = await resp.json()
                if data and data.get("telegram_id"):
                    # Десериализация
                    all_scenes = json.loads(data["all_scenes"]) if data.get("all_scenes") else []
                    profile_scores = json.loads(data["profile_scores"]) if data.get("profile_scores") else {}
                    profession_scores = json.loads(data["profession_scores"]) if data.get("profession_scores") else {}
                    return {
                        "all_scenes": all_scenes,
                        "scene_index": data.get("current_scene", 0),
                        "profile_scores": profile_scores,
                        "profession_scores": profession_scores,
                        "lang": data.get("lang", "ru")
                    }
    return None

async def save_test_progress(telegram_id, scene_index, all_scenes, profile_scores, profession_scores, lang):
    payload = {
        "telegram_id": telegram_id,
        "current_scene": scene_index,
        "all_scenes": json.dumps(all_scenes, ensure_ascii=False),
        "profile_scores": json.dumps(profile_scores, ensure_ascii=False),
        "profession_scores": json.dumps(profession_scores, ensure_ascii=False),
        "lang": lang
    }
    async with aiohttp.ClientSession() as session:
        await session.post(f"{settings.API_URL}/test_progress/", json=payload)

async def delete_test_progress(telegram_id):
    async with aiohttp.ClientSession() as session:
        await session.delete(f"{settings.API_URL}/test_progress/?telegram_id={telegram_id}")

@router.message(Command("test"))
async def start_test(message: Message, state: FSMContext):
    user_data = await get_user_data_from_api(message.from_user.id)
    if not user_data or not user_data.get("fio"):
        lang = await get_user_lang(message.from_user.id)
        await message.answer(get_message("register", lang))
        await state.clear()
        await state.set_state(RegistrationStates.waiting_for_fio)
        await message.answer(get_message("registration_fio", lang))
        return
    # --- ПРОВЕРКА ПРОГРЕССА ---
    progress = await load_test_progress(message.from_user.id)
    if progress:
        await state.update_data(**progress)
        all_scenes = progress["all_scenes"]
        scene_index = progress["scene_index"]
        await send_scene(message, all_scenes[scene_index], state=state)
        return
    await start_test_flow(message, state)

@router.message(F.text.in_(["🧩 Тест", "🧩 Тест"]))
async def start_test_button(message: Message, state: FSMContext):
    await start_test(message, state)

import random

CREATIVE_TEXTS = {
    'ru': [
    "✨ Ты сделал выбор! Путь продолжается...",
    "🚀 Каждый шаг — это новое открытие!",
    "🌟 Отлично! Двигаемся дальше!",
    "🔮 Твой выбор формирует будущее!",
    "🔥 Вперёд к новым открытиям!",
    ],
    'ky': [
        "✨ Сен тандоо жасадың! Жол улантылууда...",
        "🚀 Ар бир кадам — жаңы ачылыш!",
        "🌟 Мыкты! Алдыга жылабыз!",
        "🔮 Сенин тандооң келечекти түзүп жатат!",
        "🔥 Жаңы ачылыштарга карай алдыга!",
    ]
}

def genderize(text, gender):
    if not text:
        return ""
    # Универсальная обработка шаблонов {gender:male|муж|жен} для любого языка (в том числе кыргызского)
    def replacer(match):
        male, female = match.group(1), match.group(2)
        return female if gender == 'female' else male
    return re.sub(r'\{gender:male\|([^|]+)\|([^}]+)\}', replacer, text)

def get_scene_text(scene, scene_index=None, total_scenes=None, creative_prefix=None, gender='male'):
    title = genderize(scene.get('title', ''), gender)
    desc = genderize(scene.get('description', '') or scene.get('text', ''), gender)
    progress = ""
    if scene_index is not None and total_scenes is not None:
        bar_len = 8
        filled = int((scene_index+1) / total_scenes * bar_len)
        progress_bar = f"{'🟩'*filled}{'⬜️'*(bar_len-filled)} {scene_index+1}/{total_scenes}"
        progress = f"<b>Вопрос {scene_index+1} из {total_scenes}</b>\n{progress_bar}\n"
    # Формируем текст вариантов ответов
    options = scene.get('options', [])
    options_text = ""
    if options:
        options_text = "\n".join([
            f"<b>{i+1}.</b> {genderize(opt['text'], gender)}" for i, opt in enumerate(options)
        ])
    if title and desc:
        return f"{progress}<b>{title}</b>\n\n{desc}\n\n{options_text}"
    elif title:
        return f"{progress}<b>{title}</b>\n\n{options_text}"
    elif desc:
        return f"{progress}{desc}\n\n{options_text}"
    else:
        return f"{progress}Вопрос\n\n{options_text}"

async def send_scene(message_or_callback, scene, scene_type='main', state=None, creative_prefix=None, only_option_id=None, extra_buttons=None):
    scene_index = None
    total_scenes = None
    gender = 'male'
    if state is not None:
        data = await state.get_data()
        all_scenes = data.get('all_scenes', [])
        for idx, s in enumerate(all_scenes):
            if s['id'] == scene['id']:
                scene_index = idx
                break
        total_scenes = len(all_scenes)
        gender = data.get('gender', 'male')
    text = get_scene_text(scene, scene_index, total_scenes, gender=gender)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{i+1}. {genderize(opt['text'], gender)}", callback_data=f"{scene_type}:{scene['id']}:{opt['id']}")]
            for i, opt in enumerate(scene.get('options', []))
                if not only_option_id or str(opt['id']) == str(only_option_id)
            ] + (extra_buttons if extra_buttons else [])
    )
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.regexp(r'^(main|personal):'))
async def handle_scene_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    all_scenes = data.get('all_scenes', [])
    if not all_scenes:
        lang = data.get('lang', 'ru')
        await callback.message.answer(
            "Похоже, тест был прерван или вы сменили устройство/язык. Пожалуйста, начните тест заново командой /test."
            if lang == 'ru' else
            "Кыязы, тест үзгүлтүккө учурады же сиз түзмөк/тилди алмаштырдыңыз. Сураныч, тестти кайрадан /test буйругу менен баштаңыз."
        )
        await state.clear()
        return
    scene_index = data.get('scene_index', 0)
    profile_scores = data.get('profile_scores', {})
    profession_scores = data.get('profession_scores', {})
    lang = data.get('lang', 'ru')
    gender = data.get('gender', 'male')
    scene_type, scene_id, option_id = callback.data.split(":", 2)
    scene_id = int(scene_id)
    scene = next((s for s in all_scenes if s['id'] == scene_id), None)
    if not scene:
        await callback.message.answer("Ошибка: сцена не найдена." if lang == 'ru' else "Ката: сцена табылган жок.")
        return
    selected_option = next((opt for opt in scene.get('options', []) if str(opt['id']) == option_id), None)
    if not selected_option:
        await callback.message.answer("Ошибка: опция не найдена." if lang == 'ru' else "Ката: опция табылган жок.")
        return
    
    # --- Показываем feedback только через alert ---
    feedback_text = selected_option.get('feedback')
    def genderize(text):
        if gender == 'female':
            return text.replace('{gender:male|ся|ась}', 'ась').replace('{gender:male||а}', 'а').replace('{gender:male||на}', 'на')
        else:
            return text.replace('{gender:male|ся|ась}', 'ся').replace('{gender:male||а}', '').replace('{gender:male||на}', '')
    feedback_text = genderize(feedback_text) if feedback_text else ''
    if feedback_text:
        await callback.answer(feedback_text, show_alert=True)
    
    # --- Накопление баллов по профилям (первые 6 сцен) ---
    if scene_type == 'main' and 'profile' in selected_option:
        profiles = selected_option['profile']
        if isinstance(profiles, list):
            for profile in profiles:
                name = profile.get('name') if isinstance(profile, dict) else profile
                profile_scores[name] = profile_scores.get(name, 0) + 1
        else:
            name = profiles.get('name') if isinstance(profiles, dict) else profiles
            profile_scores[name] = profile_scores.get(name, 0) + 1
    
    # --- После 6-й сцены сразу запускаем персональные сцены ---
    if scene_type == 'main' and scene_index == 5:
        if profile_scores:
            top_profile = max(profile_scores.items(), key=lambda x: x[1])[0]
        else:
            top_profile = None
        PROFILE_TO_PROFILE_NAME = {
            'Техническая': 'Техническая',
            'Техникалык': 'Техническая',
            'Гуманитарная': 'Гуманитарная',
            'Гуманитардык': 'Гуманитарная',
            'Естественно-научная': 'Естественно-научная',
            'Табигый-илимий': 'Естественно-научная',
            'Социально-экономическая': 'Социально-экономическая',
            'Социалдык-экономикалык': 'Социально-экономическая',
            'Творческо-художественная': 'Творческо-художественная',
            'Чыгармачыл-көркөм': 'Творческо-художественная',
            'Прикладно-технологическая': 'Прикладно-технологическая',
            'Колдонмо-технологиялык': 'Прикладно-технологическая',
        }
        profile_name = PROFILE_TO_PROFILE_NAME.get(top_profile)
        sm = SceneManager(language=lang, gender=gender)
        personal_scenes = sm.get_personal_scenes_by_branch(profile_name)
        if not personal_scenes:
            await callback.message.answer("Нет персональных сцен для этого профиля. Попробуйте выбрать другой." if lang == 'ru' else "Бул профиль үчүн жеке сценалар жок. Башка профилди тандап көрүңүз.")
            return
        await state.update_data(
            all_scenes=personal_scenes,
            scene_index=0,
            branch=profile_name,
            profile_scores=profile_scores,
            profession_scores=profession_scores
        )
        await send_scene(callback, personal_scenes[0], scene_type='personal', state=state)
        return
    
    # --- В персональных сценах считаем баллы по всем profiles (по name) ---
    if scene_type == 'personal' and 'profiles' in selected_option:
        for prof in selected_option['profiles']:
            prof_name = prof.get('name')
            if prof_name:
                profession_scores[prof_name] = profession_scores.get(prof_name, 0) + prof.get('weight', 1)
    
    # --- Если персональные сцены закончились — выводим результат ---
    if scene_type == 'personal' and scene_index+1 >= len(all_scenes):
        await show_test_result(callback, state)
        return
    
    # --- Переход к следующей сцене ---
    await state.update_data(scene_index=scene_index+1, profile_scores=profile_scores, profession_scores=profession_scores)
    next_scene = all_scenes[scene_index+1]
    await send_scene(callback, next_scene, scene_type=scene_type, state=state)
    # --- СОХРАНЯЕМ ПРОГРЕСС ---
    await save_test_progress(
        callback.from_user.id,
        scene_index+1,
        all_scenes,
        profile_scores,
        profession_scores,
        lang
    )

async def show_test_result(message_or_callback, state: FSMContext, all_collected=False):
    data = await state.get_data()
    profile_scores = data.get('profile_scores', {})
    profession_scores = data.get('profession_scores', {})
    user_id = message_or_callback.from_user.id if hasattr(message_or_callback, 'from_user') else message_or_callback.message.from_user.id
    lang = data.get('lang', 'ru')
    artifact_lang = lang
    
    # --- Локализация ключей для детализации ---
    details_keys = {
        'ru': {
            'profile_scores': 'Профильные баллы',
            'profession_scores': 'Профессиональные баллы',
            'artifact': 'Артефакт',
            'lang': 'Язык',
        },
        'ky': {
            'profile_scores': 'Профильдик упайлар',
            'profession_scores': 'Кесиптик упайлар',
            'artifact': 'Артефакт',
            'lang': 'Тил',
        }
    }[artifact_lang]
    
    # --- Вдохновляющие заголовки и фразы ---
    result_titles = {
        'ru': "<b>🎉 Твой путь только начинается!</b>",
        'ky': "<b>🎉 Сенин жолуң эми башталды!</b>"
    }
    artifact_phrases = {
        'ru': "🏆 Ты получил уникальный артефакт! Это твой символ достижений и новых открытий:",
        'ky': "🏆 Сен уникалдуу артефакт алдың! Бул сенин жетишкендиктериңдин жана жаңы ачылыштарыңдын белгиси:"
    }
    all_collected_phrases = {
        'ru': "🎊 Ты собрал все артефакты этого профиля! Ты — настоящий исследователь!",
        'ky': "🎊 Бул профилдин бардык артефакттарын чогулттуң! Сен чыныгы изилдөөчүсүң!"
    }
    no_profession_phrases = {
        'ru': "🤔 Не удалось определить профессию. Попробуй пройти тест ещё раз или выбери другой путь!",
        'ky': "🤔 Кесип аныкталган жок. Тестти кайра өтүп көр же башка жолду танда!"
    }
    top_professions_title = {
        'ru': "<b>🔝 Твои сильные стороны (ТОП-3 профессии):</b>",
        'ky': "<b>🔝 Сенин күчтүү жактарың (ТОП-3 кесип):</b>"
    }
    top_profiles_title = {
        'ru': "<b>🌈 Твои ведущие профили:</b>",
        'ky': "<b>🌈 Сенин негизги профилдериң:</b>"
    }
    details_title = {
        'ru': "<b>📊 Детализация результата:</b>",
        'ky': "<b>📊 Натыйжанын деталдары:</b>"
    }
    retry_text = {
        'ru': "🔄 Пройти тест заново",
        'ky': "🔄 Тестти кайра өтүү"
    }
    
    # --- Фильтруем только профессии, для которых есть артефакт ---
    prof_keys = set(ARTIFACTS_BY_PROFESSION.keys())
    prof_scores = {k: v for k, v in profession_scores.items() if k in prof_keys}
    
    # --- Определяем топ-1 профессию (или случайно из топовых) ---
    top_profession = None
    max_score = 0
    if prof_scores:
        max_score = max(prof_scores.values())
        top_professions = [k for k, v in prof_scores.items() if v == max_score]
        top_profession = random.choice(top_professions)
    
    # --- Получаем артефакт по профессии и языку ---
    artifact = None
    if top_profession in ARTIFACTS_BY_PROFESSION:
        artifact = ARTIFACTS_BY_PROFESSION[top_profession].get(artifact_lang) or ARTIFACTS_BY_PROFESSION[top_profession].get('ru')
    
    # --- Получаем список артефактов пользователя ---
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{settings.API_URL}/users/?telegram_id={user_id}") as resp:
                user = await resp.json() if resp.status == 200 else {}
    except Exception as e:
        user = {}
        print(f"[ERROR] Не удалось получить пользователя из API: {e}")
    
    user_artifacts = user.get('artifacts', []) if user else []
    
    # --- Проверяем, есть ли этот артефакт ---
    artifact_key = artifact['name'] if artifact else None
    new_artifact = artifact_key and artifact_key not in user_artifacts
    
    # --- Сохраняем артефакт, если новый ---
    if artifact_key:
        try:
            if new_artifact:
                user_artifacts.append(artifact_key)
                user['artifacts'] = json.dumps(user_artifacts, ensure_ascii=False)
                allowed_fields = {
                    "telegram_id", "fio", "school", "class_number", "class_letter",
                    "gender", "birth_year", "city", "language", "artifacts", "opened_profiles"
                }
                user_data = {k: v for k, v in user.items() if k in allowed_fields}
                if isinstance(user_data.get('opened_profiles'), list):
                    user_data['opened_profiles'] = json.dumps(user_data['opened_profiles'], ensure_ascii=False)
                if user_data.get('language') not in ['ru', 'ky']:
                    user_data['language'] = normalize_lang(user_data.get('language', 'ru'))
                async with aiohttp.ClientSession() as session:
                    await session.post(settings.API_URL, json=user_data)
            if new_artifact:
                await message_or_callback.answer(f"🎉 Ты получил новый артефакт: <b>{artifact_key}</b>!" if lang == 'ru' else f"🎉 Сен жаңы артефакт алдың: <b>{artifact_key}</b>!", parse_mode="HTML")
        except Exception as e:
            print(f"[ERROR] Не удалось сохранить артефакт: {e}")
            await message_or_callback.answer("⚠️ Произошла ошибка при сохранении артефакта. Попробуйте позже." if lang == 'ru' else "⚠️ Артефакты сактоодо ката кетти. Кийинчерээк аракет кылып көрүңүз.")
    else:
        await message_or_callback.answer("❗️ Артефакт не определён. Попробуйте пройти тест ещё раз или выберите другой путь." if lang == 'ru' else "❗️ Артефакт аныкталган жок. Тестти кайра өтүп көрүңүз же башка жолду тандаңыз.")
    
    # --- Добавляем профиль в opened_profiles ---
    if top_profession:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{settings.API_URL}/users/?telegram_id={user_id}") as resp:
                user = await resp.json() if resp.status == 200 else {}
        opened_profiles = set(user.get('opened_profiles', []) or [])
        opened_profiles.add(top_profession)
        user['opened_profiles'] = json.dumps(list(opened_profiles), ensure_ascii=False)
        allowed_fields = {
            "telegram_id", "fio", "school", "class_number", "class_letter",
            "gender", "birth_year", "city", "language", "artifacts", "opened_profiles"
        }
        user_data = {k: v for k, v in user.items() if k in allowed_fields}
        if user_data.get('language') not in ['ru', 'ky']:
            user_data['language'] = normalize_lang(user_data.get('language', 'ru'))
        async with aiohttp.ClientSession() as session:
            await session.post(settings.API_URL, json=user_data)
    
    # --- КРАСИВОЕ ОФОРМЛЕНИЕ ---
    lines = []
    lines.append(result_titles[artifact_lang])
    lines.append("<b>━━━━━━━━━━━━━━━━━━━━━━</b>")
    
    if all_collected:
        lines.append(all_collected_phrases[artifact_lang])
    elif artifact:
        lines.append(artifact_phrases[artifact_lang] + f"\n<b>{artifact['name']}</b> — <i>{artifact['desc']}</i>")
    else:
        lines.append(no_profession_phrases[artifact_lang])
    
    lines.append("<b>━━━━━━━━━━━━━━━━━━━━━━</b>")
    
    # --- Топ-3 профессии ---
    if not profession_scores:
        lines.append(no_profession_phrases[artifact_lang])
    else:
        top_professions = sorted(profession_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        lines.append(top_professions_title[artifact_lang])
        for name, score in top_professions:
            display_name = PROFILE_TRANSLATIONS[artifact_lang].get(name, name)
            lines.append(f"<b>• {display_name}</b> — <b>{score} ⭐</b>")
    
    # --- Топ-3 профиля (для информации) ---
    if profile_scores:
        top_profiles = sorted(profile_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        lines.append(top_profiles_title[artifact_lang])
        for name, score in top_profiles:
            display_name = PROFILE_TRANSLATIONS[artifact_lang].get(name, name)
            lines.append(f"<b>• {display_name}</b> — <b>{score} ⭐</b>")
        top_profile = top_profiles[0][0] if top_profiles else "-"
    else:
        top_profile = "-"
    
    lines.append("<b>━━━━━━━━━━━━━━━━━━━━━━</b>")
    
    # --- Детализация (profile_scores, profession_scores, artifact, lang) ---
    details_lines = []
    details_lines.append(f"<b>• {details_keys['profile_scores']}:</b> <code>{profile_scores}</code>")
    details_lines.append(f"<b>• {details_keys['profession_scores']}:</b> <code>{profession_scores}</code>")
    details_lines.append(f"<b>• {details_keys['artifact']}:</b> <code>{artifact_key if artifact_key else '-'}</code>")
    details_lines.append(f"<b>• {details_keys['lang']}:</b> <code>{artifact_lang}</code>")
    lines.append(details_title[artifact_lang] + '\n' + '\n'.join(details_lines))
    
    text = "\n".join(lines)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=retry_text[artifact_lang], callback_data="restart_test")]
        ]
    )
    
    # Разбиваем длинные сообщения на части, если нужно
    MAX_LEN = 4000
    if isinstance(message_or_callback, Message):
        for i in range(0, len(text), MAX_LEN):
            await message_or_callback.answer(text[i:i+MAX_LEN], reply_markup=keyboard if i == 0 else None, parse_mode="HTML")
    else:
        try:
            for i in range(0, len(text), MAX_LEN):
                await message_or_callback.message.edit_text(text[i:i+MAX_LEN], reply_markup=keyboard if i == 0 else None, parse_mode="HTML")
        except Exception as e:
            if "message is not modified" in str(e):
                pass  # Просто игнорируем эту ошибку
            else:
                raise
    
    await state.clear()

    # --- Сохраняем результат теста в API (TestResult) ---
    try:
        API_TEST_RESULT = "http://localhost:8000/test_results/"
        test_result = {
            "telegram_id": user_id,
            "finished_at": datetime.now().isoformat(),
            "profile": top_profession or "-",
            "score": max_score if prof_scores else 0,
            "details": json.dumps({
                "profile_scores": profile_scores,
                "profession_scores": profession_scores,
                "artifact": artifact_key,
                "lang": artifact_lang
            }, ensure_ascii=False)
        }
        async with aiohttp.ClientSession() as session:
            await session.post(API_TEST_RESULT, json=test_result)
    except Exception as e:
        print(f"[ERROR] Не удалось сохранить результат теста: {e}")

    # --- УДАЛЯЕМ ПРОГРЕСС ---
    user_id = message_or_callback.from_user.id if hasattr(message_or_callback, 'from_user') else message_or_callback.message.from_user.id
    await delete_test_progress(user_id)

@router.callback_query(F.data == "restart_test")
async def restart_test_callback(callback: CallbackQuery, state: FSMContext):
    await start_test(callback.message, state)

@router.callback_query(F.data == "to_start")
async def to_start_callback(callback: CallbackQuery, state: FSMContext):
    # Возврат на самое начало теста
    await start_test_flow(callback.message, state)

@router.callback_query(F.data.regexp(r'^(personal):'))
async def handle_personal_scene_callback(callback: CallbackQuery, state: FSMContext):
    await handle_scene_callback(callback, state)

# --- Индивидуальные советы по профессиям ---
# Часть PROFESSION_TIPS добавлена в начало файла

@router.message(F.text.in_(["🗝️ Коллекция артефактов", "🗝️ Артефакттар коллекциясы"]))
async def show_artifact_collection(message: Message):
    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{settings.API_URL}/users/?telegram_id={user_id}") as resp:
            user = await resp.json() if resp.status == 200 else {}
    user_artifacts = set(user.get('artifacts', []) or [])
    lang = await get_user_lang(user_id)
    artifact_lang = lang
    branch_names = {
        'ru': {
            'technical': 'Технический',
            'natural_science': 'Естественно-научный',
            'humanitarian': 'Гуманитарный',
            'social_economic': 'Социально-экономический',
            'creative_art': 'Творческо-художественный',
            'applied_technology': 'Прикладно-технологический',
        },
        'ky': {
            'technical': 'Техникалык',
            'natural_science': 'Жаратылыш таануу',
            'humanitarian': 'Гуманитардык',
            'social_economic': 'Социалдык-экономикалык',
            'creative_art': 'Творчестволук-көркөм',
            'applied_technology': 'Колдонмо-технологиялык',
        }
    }[artifact_lang]
    kb = InlineKeyboardBuilder()
    for branch, name in branch_names.items():
        kb.button(text=name, callback_data=f"artifact_branch:{branch}")
    kb.adjust(2)
    await message.answer(
        "Выберите профиль для просмотра артефактов:" if artifact_lang == 'ru' else "Артефакттарды көрүү үчүн профилди тандаңыз:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.regexp(r'^artifact_branch:'))
async def show_artifacts_by_branch(callback: CallbackQuery):
    user_id = callback.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{settings.API_URL}/users/?telegram_id={user_id}") as resp:
            user = await resp.json() if resp.status == 200 else {}
    user_artifacts = set(user.get('artifacts', []) or [])
    lang = await get_user_lang(user_id)
    artifact_lang = lang
    branch = callback.data.split(':', 1)[1]
    branch_names = {
        'ru': {
            'technical': 'Технический',
            'natural_science': 'Естественно-научный',
            'humanitarian': 'Гуманитарный',
            'social_economic': 'Социально-экономический',
            'creative_art': 'Творческо-художественный',
            'applied_technology': 'Прикладно-технологический',
        },
        'ky': {
            'technical': 'Техникалык',
            'natural_science': 'Жаратылыш таануу',
            'humanitarian': 'Гуманитардык',
            'social_economic': 'Социалдык-экономикалык',
            'creative_art': 'Творчестволук-көркөм',
            'applied_technology': 'Колдонмо-технологиялык',
        }
    }[artifact_lang]
    arts = [art for art in ARTIFACTS_BY_PROFESSION.values() if art.get('branch') == branch][:10]
    total = len(arts)
    collected = sum(1 for art in arts if art.get(artifact_lang, {}).get('name', '') in user_artifacts)
    bar_len = 10
    filled = int(bar_len * collected / total) if total else 0
    progress_bar = f"{'🟩'*filled}{'⬜️'*(bar_len-filled)} {collected}/{total}"
    # --- Локализация статусов ---
    status_received = {"ru": "получен!", "ky": "алынды!"}
    status_not_received = {"ru": "ещё не получен", "ky": "азырынча алына элек"}
    lines = [f"<b>🗝️ {branch_names[branch]} профиль:</b>" if artifact_lang == 'ru' else f"<b>🗝️ {branch_names[branch]} профили:</b>", progress_bar]
    all_collected = True
    for art in arts:
        if artifact_lang in art:
            art_name = art[artifact_lang]['name']
            emoji = art[artifact_lang].get('emoji', '🗝️')
            desc = art[artifact_lang]['desc']
        else:
            art_name = art['ru']['name']
            emoji = art['ru'].get('emoji', '🗝️')
            desc = art['ru']['desc']
        if art_name in user_artifacts:
            lines.append(f"{emoji} <b>{art_name}</b> — <i>{status_received[artifact_lang]}</i>\n{desc}")
        else:
            lines.append(f"{emoji} <b>{art_name}</b> — <i>{status_not_received[artifact_lang]}</i>")
            all_collected = False
    if all_collected and arts:
        lines.append("\n🎉 <b>Поздравляем! Ты собрал все артефакты этого профиля!</b>" if artifact_lang=='ru' else "\n🎉 <b>Куттуктайбыз! Бул профилдин бардык артефакттарын чогулттуң!</b>")
    back_kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="Выбрать другой профиль" if artifact_lang == 'ru' else "Башка профиль тандоо", callback_data="artifact_choose_profile")]]
    )
    await callback.message.edit_text("\n\n".join(lines), parse_mode="HTML", reply_markup=back_kb)
    await callback.answer()

@router.callback_query(F.data == "artifact_choose_profile")
async def artifact_choose_profile(callback: CallbackQuery):
    lang = await get_user_lang(callback.from_user.id)
    artifact_lang = lang
    
    branch_names = {
        'ru': {
            'technical': 'Технический',
            'natural_science': 'Естественно-научный',
            'humanitarian': 'Гуманитарный',
            'social_economic': 'Социально-экономический',
            'creative_art': 'Творческо-художественный',
            'applied_technology': 'Прикладно-технологический',
        },
        'ky': {
            'technical': 'Техникалык',
            'natural_science': 'Жаратылыш таануу',
            'humanitarian': 'Гуманитардык',
            'social_economic': 'Социалдык-экономикалык',
            'creative_art': 'Творчестволук-көркөм',
            'applied_technology': 'Колдонмо-технологиялык',
        }
    }[artifact_lang]
    
    kb = InlineKeyboardBuilder()
    for branch, name in branch_names.items():
        kb.button(text=name, callback_data=f"artifact_branch:{branch}")
    kb.adjust(2)
    
    await callback.message.edit_text(
        "Выберите профиль для просмотра артефактов:" if artifact_lang == 'ru' else "Артефакттарды көрүү үчүн профилди тандаңыз:",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

# --- Порталы: быстрый доступ к персональным профилям ---
@router.message(F.text.in_(["🗝️ Порталы", "🗝️ Порталдар"]))
async def show_portals(message: Message):
    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{settings.API_URL}/users/?telegram_id={user_id}") as resp:
            user = await resp.json() if resp.status == 200 else {}
    opened_profiles = user.get('opened_profiles', []) or []
    # --- Автокоррекция: заменяем кыргызские профили на русские ---
    corrected_profiles = []
    changed = False
    for prof in opened_profiles:
        if prof in KY_TO_RU_PROFILE:
            corrected_profiles.append(KY_TO_RU_PROFILE[prof])
            changed = True
        else:
            corrected_profiles.append(prof)
    if changed:
        user['opened_profiles'] = corrected_profiles
        async with aiohttp.ClientSession() as session:
            await session.post(settings.API_URL, json=user)
        print(f"[DEBUG] Исправлены opened_profiles: {corrected_profiles}")
    opened_profiles = corrected_profiles
    lang = await get_user_lang(user_id)
    artifact_lang = lang
    if not opened_profiles:
        await message.answer("У тебя пока нет открытых порталов." if artifact_lang == 'ru' else "Сенде азырынча ачык порталдар жок.")
        return
    kb = InlineKeyboardBuilder()
    for prof in opened_profiles:
        # Переводим профиль для вывода на нужном языке
        display_name = PROFILE_TRANSLATIONS[artifact_lang].get(prof, prof)
        kb.button(text=display_name, callback_data=f"portal:{prof}")
    kb.adjust(2)
    await message.answer(
        "Выбери портал для быстрого прохождения:" if artifact_lang == 'ru' else "Тез өтүү үчүн порталды тандаңыз:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.regexp(r'^portal:'))
async def start_personal_portal(callback: CallbackQuery, state: FSMContext):
    profile_name = callback.data.split(":", 1)[1]
    # --- Автокоррекция: если вдруг profile_name на кыргызском, переводим на русский ---
    if profile_name in KY_TO_RU_PROFILE:
        profile_name = KY_TO_RU_PROFILE[profile_name]
        print(f"[DEBUG] Исправлен profile_name на русский: {profile_name}")
    lang = await get_user_lang(callback.from_user.id)
    artifact_lang = lang
    gender = 'male'  # Можно доработать получение пола из user_data
    sm = SceneManager(language=lang, gender=gender)
    personal_scenes = sm.get_personal_scenes_by_branch(profile_name)
    if not personal_scenes:
        await callback.message.answer("Нет персональных сцен для этого профиля." if artifact_lang == 'ru' else "Бул профиль үчүн жеке сценалар жок.")
        return
    await state.clear()
    await state.update_data(
        all_scenes=personal_scenes,
        scene_index=0,
        branch=profile_name,
        profile_scores={},
        profession_scores={}
    )
    # --- Сохраняем открытый профиль (всегда на русском) ---
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{settings.API_URL}/users/?telegram_id={callback.from_user.id}") as resp:
            user = await resp.json() if resp.status == 200 else {}
    opened_profiles = set(user.get('opened_profiles', []) or [])
    # --- Автокоррекция при сохранении ---
    corrected_profiles = set()
    for prof in opened_profiles:
        if prof in KY_TO_RU_PROFILE:
            corrected_profiles.add(KY_TO_RU_PROFILE[prof])
        else:
            corrected_profiles.add(prof)
    corrected_profiles.add(profile_name)
    user['opened_profiles'] = list(corrected_profiles)
    async with aiohttp.ClientSession() as session:
        await session.post(settings.API_URL, json=user)
    await send_scene(callback, personal_scenes[0], scene_type='personal', state=state)
    await callback.answer()

def register_handlers(dispatcher):
    dispatcher.include_router(router)